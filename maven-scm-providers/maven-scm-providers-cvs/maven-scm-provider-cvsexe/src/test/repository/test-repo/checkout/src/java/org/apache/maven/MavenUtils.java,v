head	1.111;
access;
symbols
	MAVEN_1_0:1.107.4.22
	MAVEN_1_0_RC4:1.107.4.21
	MAVEN_1_0_RC3:1.107.4.20
	MAVEN-1_0-BRANCH-merge-3:1.107.4.20
	MAVEN_1_0_RC2:1.107.4.12
	MAVEN-1_0-BRANCH-merge-2:1.107.4.8
	MAVEN-1_0-BRANCH-merge-1:1.107.4.8
	MAVEN-1_0-BRANCH:1.107.0.4
	MAVEN_RC2_UNSTABLE-merge-1:1.107
	MAVEN_RC2_UNSTABLE:1.107.0.2
	MAVEN_1_0_RC1:1.105
	MAVEN_RC1_REFACTOR:1.98.0.2
	MAVEN_POST_RC1_REFACTOR:1.98
	MAVEN_RC1_STABLE:1.94.0.2
	BRW_TEST:1.97.0.2
	MAVEN_PRE_RC1_REFACTOR:1.94
	MAVEN_1_0_B10:1.94
	MAVEN_1_0_B9:1.91
	MAVEN_1_0_B8:1.88
	SAFE_31_DEC_2002:1.79
	SAFE_31_OCT_2002:1.49
	MAVEN_1_0_B7:1.45
	MAVEN_1_0_B6:1.41
	MAVEN_1_0_B5:1.37
	MAVEN_1_0_B4:1.20
	pre_callbacks:1.15
	MAVEN_1_0_B3:1.9
	MAVEN_1_0_B2:1.6
	MAVEN_1_0_B1:1.3;
locks; strict;
comment	@# @;


1.111
date	2004.06.28.15.09.13;	author brett;	state Exp;
branches;
next	1.110;

1.110
date	2004.05.05.13.05.52;	author brett;	state Exp;
branches;
next	1.109;

1.109
date	2004.03.23.02.18.18;	author brett;	state Exp;
branches;
next	1.108;

1.108
date	2004.02.07.22.46.15;	author brett;	state Exp;
branches;
next	1.107;

1.107
date	2003.10.17.01.08.02;	author dion;	state Exp;
branches
	1.107.2.1
	1.107.4.1;
next	1.106;

1.106
date	2003.10.16.08.53.42;	author dion;	state Exp;
branches;
next	1.105;

1.105
date	2003.09.04.00.36.04;	author dion;	state Exp;
branches;
next	1.104;

1.104
date	2003.09.02.12.55.12;	author evenisse;	state Exp;
branches;
next	1.103;

1.103
date	2003.09.02.10.28.28;	author evenisse;	state Exp;
branches;
next	1.102;

1.102
date	2003.09.01.06.56.58;	author dion;	state Exp;
branches;
next	1.101;

1.101
date	2003.09.01.05.34.08;	author dion;	state Exp;
branches;
next	1.100;

1.100
date	2003.09.01.00.34.40;	author dion;	state Exp;
branches;
next	1.99;

1.99
date	2003.08.19.04.31.38;	author dion;	state Exp;
branches;
next	1.98;

1.98
date	2003.08.06.05.05.23;	author dion;	state Exp;
branches;
next	1.97;

1.97
date	2003.07.29.01.04.36;	author dion;	state Exp;
branches;
next	1.96;

1.96
date	2003.07.29.00.17.50;	author dion;	state Exp;
branches;
next	1.95;

1.95
date	2003.07.27.23.33.56;	author jvanzyl;	state Exp;
branches;
next	1.94;

1.94
date	2003.06.07.01.27.52;	author jvanzyl;	state Exp;
branches
	1.94.2.1;
next	1.93;

1.93
date	2003.04.12.00.02.04;	author dion;	state Exp;
branches;
next	1.92;

1.92
date	2003.04.11.09.03.09;	author abarantsev;	state Exp;
branches;
next	1.91;

1.91
date	2003.03.24.13.55.28;	author dion;	state Exp;
branches;
next	1.90;

1.90
date	2003.03.08.02.31.36;	author bwalding;	state Exp;
branches;
next	1.89;

1.89
date	2003.02.21.07.03.33;	author dion;	state Exp;
branches;
next	1.88;

1.88
date	2003.02.10.13.55.00;	author jvanzyl;	state Exp;
branches;
next	1.87;

1.87
date	2003.01.24.05.21.36;	author jvanzyl;	state Exp;
branches;
next	1.86;

1.86
date	2003.01.24.03.50.37;	author jvanzyl;	state Exp;
branches;
next	1.85;

1.85
date	2003.01.08.20.25.57;	author jvanzyl;	state Exp;
branches;
next	1.84;

1.84
date	2003.01.07.03.13.53;	author jvanzyl;	state Exp;
branches;
next	1.83;

1.83
date	2003.01.02.10.56.52;	author dion;	state Exp;
branches;
next	1.82;

1.82
date	2003.01.02.10.56.02;	author dion;	state Exp;
branches;
next	1.81;

1.81
date	2003.01.02.07.25.00;	author jvanzyl;	state Exp;
branches;
next	1.80;

1.80
date	2002.12.31.07.01.38;	author jvanzyl;	state Exp;
branches;
next	1.79;

1.79
date	2002.12.18.17.13.37;	author tcopeland;	state Exp;
branches;
next	1.78;

1.78
date	2002.12.18.17.11.01;	author tcopeland;	state Exp;
branches;
next	1.77;

1.77
date	2002.12.12.11.37.11;	author jvanzyl;	state Exp;
branches;
next	1.76;

1.76
date	2002.12.11.22.30.07;	author jvanzyl;	state Exp;
branches;
next	1.75;

1.75
date	2002.12.10.23.03.04;	author jvanzyl;	state Exp;
branches;
next	1.74;

1.74
date	2002.12.10.15.46.51;	author jvanzyl;	state Exp;
branches;
next	1.73;

1.73
date	2002.12.03.02.48.36;	author jvanzyl;	state Exp;
branches;
next	1.72;

1.72
date	2002.12.02.15.21.44;	author jvanzyl;	state Exp;
branches;
next	1.71;

1.71
date	2002.12.01.23.26.10;	author dion;	state Exp;
branches;
next	1.70;

1.70
date	2002.11.30.17.18.25;	author jvanzyl;	state Exp;
branches;
next	1.69;

1.69
date	2002.11.24.23.41.12;	author jvanzyl;	state Exp;
branches;
next	1.68;

1.68
date	2002.11.24.19.19.37;	author jvanzyl;	state Exp;
branches;
next	1.67;

1.67
date	2002.11.24.19.12.45;	author jvanzyl;	state Exp;
branches;
next	1.66;

1.66
date	2002.11.24.19.00.37;	author jvanzyl;	state Exp;
branches;
next	1.65;

1.65
date	2002.11.24.18.45.59;	author jvanzyl;	state Exp;
branches;
next	1.64;

1.64
date	2002.11.24.17.58.59;	author jvanzyl;	state Exp;
branches;
next	1.63;

1.63
date	2002.11.15.22.14.01;	author jvanzyl;	state Exp;
branches;
next	1.62;

1.62
date	2002.11.15.19.47.25;	author jvanzyl;	state Exp;
branches;
next	1.61;

1.61
date	2002.11.14.06.39.37;	author jvanzyl;	state Exp;
branches;
next	1.60;

1.60
date	2002.11.14.06.33.52;	author jvanzyl;	state Exp;
branches;
next	1.59;

1.59
date	2002.11.14.04.12.32;	author jvanzyl;	state Exp;
branches;
next	1.58;

1.58
date	2002.11.14.03.25.23;	author jvanzyl;	state Exp;
branches;
next	1.57;

1.57
date	2002.11.13.17.47.37;	author jvanzyl;	state Exp;
branches;
next	1.56;

1.56
date	2002.11.12.16.41.00;	author jvanzyl;	state Exp;
branches;
next	1.55;

1.55
date	2002.11.12.04.04.36;	author jvanzyl;	state Exp;
branches;
next	1.54;

1.54
date	2002.11.05.15.37.37;	author dion;	state Exp;
branches;
next	1.53;

1.53
date	2002.11.04.14.59.37;	author jtaylor;	state Exp;
branches;
next	1.52;

1.52
date	2002.11.01.20.56.56;	author smor;	state Exp;
branches;
next	1.51;

1.51
date	2002.11.01.18.49.12;	author evenisse;	state Exp;
branches;
next	1.50;

1.50
date	2002.11.01.13.27.56;	author smor;	state Exp;
branches;
next	1.49;

1.49
date	2002.10.26.05.18.40;	author dion;	state Exp;
branches;
next	1.48;

1.48
date	2002.10.19.01.47.22;	author jvanzyl;	state Exp;
branches;
next	1.47;

1.47
date	2002.10.18.15.21.28;	author jstrachan;	state Exp;
branches;
next	1.46;

1.46
date	2002.10.14.07.39.23;	author dion;	state Exp;
branches;
next	1.45;

1.45
date	2002.08.25.12.38.08;	author dion;	state Exp;
branches;
next	1.44;

1.44
date	2002.08.25.12.35.44;	author dion;	state Exp;
branches;
next	1.43;

1.43
date	2002.08.23.03.17.20;	author jvanzyl;	state Exp;
branches;
next	1.42;

1.42
date	2002.08.22.19.40.43;	author smor;	state Exp;
branches;
next	1.41;

1.41
date	2002.08.18.17.46.19;	author jvanzyl;	state Exp;
branches;
next	1.40;

1.40
date	2002.08.15.20.28.37;	author jvanzyl;	state Exp;
branches;
next	1.39;

1.39
date	2002.08.15.18.13.25;	author jvanzyl;	state Exp;
branches;
next	1.38;

1.38
date	2002.08.15.17.42.37;	author jvanzyl;	state Exp;
branches;
next	1.37;

1.37
date	2002.07.27.23.11.45;	author jvanzyl;	state Exp;
branches;
next	1.36;

1.36
date	2002.07.26.19.50.21;	author jvanzyl;	state Exp;
branches;
next	1.35;

1.35
date	2002.07.26.18.16.13;	author jvanzyl;	state Exp;
branches;
next	1.34;

1.34
date	2002.07.25.17.54.10;	author glennm;	state Exp;
branches;
next	1.33;

1.33
date	2002.07.23.03.21.43;	author jvanzyl;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.22.19.17.04;	author jvanzyl;	state Exp;
branches;
next	1.31;

1.31
date	2002.07.21.03.55.16;	author jvanzyl;	state Exp;
branches;
next	1.30;

1.30
date	2002.07.17.21.32.37;	author jvanzyl;	state Exp;
branches;
next	1.29;

1.29
date	2002.07.14.15.51.23;	author dion;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.14.15.40.48;	author dion;	state Exp;
branches;
next	1.27;

1.27
date	2002.07.03.21.51.29;	author jvanzyl;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.17.15.53.58;	author dion;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.17.14.29.11;	author dion;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.16.17.40.04;	author dion;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.16.17.07.46;	author dion;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.16.16.50.02;	author dion;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.06.16.11.51;	author dion;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.02.14.38.42;	author vmassol;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.30.12.02.47;	author jvanzyl;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.29.13.46.24;	author jvanzyl;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.27.12.19.51;	author dion;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.27.09.10.33;	author dion;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.15.00.37.08;	author dion;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.15.00.09.43;	author dion;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.15.00.07.45;	author dion;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.20.05.19.48;	author kaz;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.19.14.50.09;	author jvanzyl;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.16.21.15.19;	author jvanzyl;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.06.16.05.27;	author jvanzyl;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.05.00.10.33;	author dlr;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.01.21.46.54;	author jvanzyl;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.03.36.52;	author jvanzyl;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.02.05.08;	author jvanzyl;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.24.21.09.07;	author jvanzyl;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.18.05.16.55;	author brekke;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.05.04.12.57;	author jvanzyl;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.28.22.41.02;	author jvanzyl;	state Exp;
branches;
next	;

1.94.2.1
date	2003.08.07.16.56.39;	author dion;	state Exp;
branches;
next	1.94.2.2;

1.94.2.2
date	2003.08.11.06.16.11;	author dion;	state Exp;
branches;
next	1.94.2.3;

1.94.2.3
date	2003.08.13.06.37.43;	author dion;	state Exp;
branches;
next	1.94.2.4;

1.94.2.4
date	2003.08.18.10.25.10;	author brett;	state Exp;
branches;
next	;

1.107.2.1
date	2003.10.30.11.46.30;	author brett;	state Exp;
branches;
next	;

1.107.4.1
date	2003.11.26.11.45.16;	author brett;	state Exp;
branches;
next	1.107.4.2;

1.107.4.2
date	2003.12.02.04.09.25;	author brett;	state Exp;
branches;
next	1.107.4.3;

1.107.4.3
date	2003.12.10.23.08.44;	author brett;	state Exp;
branches;
next	1.107.4.4;

1.107.4.4
date	2003.12.31.01.32.36;	author brett;	state Exp;
branches;
next	1.107.4.5;

1.107.4.5
date	2004.01.06.08.07.03;	author brett;	state Exp;
branches;
next	1.107.4.6;

1.107.4.6
date	2004.01.07.16.28.03;	author dion;	state Exp;
branches;
next	1.107.4.7;

1.107.4.7
date	2004.01.26.23.36.08;	author brett;	state Exp;
branches;
next	1.107.4.8;

1.107.4.8
date	2004.02.07.21.47.10;	author brett;	state Exp;
branches;
next	1.107.4.9;

1.107.4.9
date	2004.02.19.23.28.31;	author brett;	state Exp;
branches;
next	1.107.4.10;

1.107.4.10
date	2004.02.26.16.10.27;	author brett;	state Exp;
branches;
next	1.107.4.11;

1.107.4.11
date	2004.03.01.22.36.36;	author evenisse;	state Exp;
branches;
next	1.107.4.12;

1.107.4.12
date	2004.03.07.00.01.29;	author brett;	state Exp;
branches;
next	1.107.4.13;

1.107.4.13
date	2004.03.26.00.18.06;	author brett;	state Exp;
branches;
next	1.107.4.14;

1.107.4.14
date	2004.03.27.23.54.39;	author brett;	state Exp;
branches;
next	1.107.4.15;

1.107.4.15
date	2004.03.28.21.27.26;	author evenisse;	state Exp;
branches;
next	1.107.4.16;

1.107.4.16
date	2004.04.02.23.37.19;	author brett;	state Exp;
branches;
next	1.107.4.17;

1.107.4.17
date	2004.04.04.02.48.03;	author brett;	state Exp;
branches;
next	1.107.4.18;

1.107.4.18
date	2004.04.10.00.56.43;	author brett;	state Exp;
branches;
next	1.107.4.19;

1.107.4.19
date	2004.04.23.03.19.28;	author brett;	state Exp;
branches;
next	1.107.4.20;

1.107.4.20
date	2004.04.24.23.11.23;	author brett;	state Exp;
branches;
next	1.107.4.21;

1.107.4.21
date	2004.06.26.14.52.05;	author dion;	state Exp;
branches;
next	1.107.4.22;

1.107.4.22
date	2004.07.06.12.23.41;	author brett;	state Exp;
branches;
next	;


desc
@@


1.111
log
@merge  up to MAVEN_1_0_RC4
@
text
@package org.apache.maven;

/* ====================================================================
 *   Copyright 2001-2004 The Apache Software Foundation.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * ====================================================================
 */

import com.werken.forehead.ForeheadClassLoader;

import org.apache.commons.betwixt.XMLIntrospector;
import org.apache.commons.betwixt.io.BeanReader;
import org.apache.commons.betwixt.io.BeanWriter;
import org.apache.commons.betwixt.strategy.DecapitalizeNameMapper;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.digester.ExtendedBaseRules;
import org.apache.commons.digester.Rule;
import org.apache.commons.jelly.JellyContext;
import org.apache.commons.jelly.expression.CompositeExpression;
import org.apache.commons.jelly.expression.Expression;
import org.apache.commons.jelly.expression.jexl.JexlExpressionFactory;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.jelly.JellyUtils;
import org.apache.maven.jelly.MavenJellyContext;
import org.apache.maven.project.BaseObject;
import org.apache.maven.project.Project;
import org.apache.maven.util.StringInputStream;
import org.apache.tools.ant.DirectoryScanner;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;

import java.beans.IntrospectionException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;

/**
 * Utilities for reading maven project descriptors, profile descriptors and
 * workspace descriptors.
 *
 * @@author <a href="mailto:jason@@zenplex.com">Jason van Zyl</a>
 * @@author <a href="mailto:brett@@apache.org">Brett Porter</a>
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
 *
 * @@todo Remove all the context creation code and make a ContextBuilder class.
 * @@todo [RC2] split getProject (project.properties + defaults) != getPluginProject (plugin.properties only)
 */
public class MavenUtils
{
    /** Log. */
    private static final Log log = LogFactory.getLog( MavenUtils.class );

    /** we want to parse something */
    private static final ThreadLocal xmlReaderPool = new ThreadLocal();

    /** Should we cache and reuse the introspector */
    private static boolean cacheIntrospector = true;

    /** The singleton introspector if caching is enabled */
    private static XMLIntrospector singletonIntrospector;

    /** Project Bean Reader */
    private static BeanReader projectBeanReader;

    /** Map of loaded POMs. */
    private static HashMap parentPoms = new HashMap();

    /**
     * Create a Project object given a file descriptor.
     *
     * @@param projectDescriptor a maven project.xml
     * @@return the Maven project object for the given project descriptor
     * @@throws MavenException when any errors occur
     */
    public static Project getProject( File projectDescriptor )
        throws MavenException
    {
        return getProject( projectDescriptor, null );
    }

    /**
     * Create a Project object given a file descriptor, and a parent context
     * @@param projectDescriptor The file to create the project from
     * @@param parentContext the parent Maven Jelly Context
     * @@return a new Project
     * @@throws MavenException when any error happens.
     */
    public static Project getProject( File projectDescriptor, MavenJellyContext parentContext )
    throws MavenException
    {
        return getProject( projectDescriptor, parentContext, true );
    }

    /**
     * Create a Project object given a file descriptor and optionally a parent Jelly
     * context.
     *
     * @@param projectDescriptor a maven project.xml {@@link File}
     * @@param parentContext the parent context for the new project
     * @@param useParentPom whether a parent project should be respected
     * @@return the MavenSession project object for the given project descriptor
     * @@throws MavenException when any errors occur
     */
    public static Project getProject( File projectDescriptor,
                                      MavenJellyContext parentContext,
                                      boolean useParentPom )
    throws MavenException
    {
        Project project = null;
        try
        {
            project = getNonJellyProject( projectDescriptor, parentContext, useParentPom );
            project = getJellyProject( project );
            project.setFile( projectDescriptor );

            // Fully initialize the project.
            project.initialize();
        }
        catch (IntrospectionException e)
        {
            throw new MavenException("Error creating a string from the project", e);
        }
        catch (IOException e)
        {
            throw new MavenException("Error reading XML or initializing", e);
        }
        catch (ParserConfigurationException e)
        {
            throw new MavenException("Error creating a JAXP Parser", e);
        }
        catch (SAXException e)
        {
            throw new MavenException("Error parsing XML", e);
        }

        return project;
    }

    /**
     *  Get a project, but not a Jelly-ised project. ie Don't evaluate the
     *  variables. We are doing several things when creating a POM object, the phases
     * are outlined here:
     *
     * 1) The project.xml file is read in using betwixt which creates for us a
     *    Project object that, at this point, has not been run through Jelly i.e.
     *    no interpolation has occured yet.
     *
     * 2) The context for the project is created and set. So each project manages its
     *    own context. See the createContext() method for the details context creation
     *    process.
     *
     * 3) We check to see if the &lt;extend&gt; tag is being employed. If so, the parent
     *    project.xml file is read in. At this point we have a child and parent POM
     *    and the values are merged where the child's values override those of the
     *    parent.
     * @@param projectDescriptor the project file
     * @@param parentContext the parent context for the new project
     * @@param useParentPom whether a parent project should be respected
     * @@return the project
     * @@throws MavenException when there are errors reading the descriptor
     * @@throws IOException when resolving file names and paths
     */
    private static Project getNonJellyProject( File projectDescriptor,
                                               MavenJellyContext parentContext,
                                               boolean useParentPom )
    throws MavenException, IOException
    {
        // 1)
        Project project = null;
        try
        {
            project = (Project) getProjectBeanReader().parse( projectDescriptor );
        }
        catch (Exception e)
        {
            throw new MavenException("Error parsing project.xml '" + projectDescriptor.getAbsolutePath() + "'");
        }

        // 2)
        MavenJellyContext context = MavenUtils.createContext( projectDescriptor.getParentFile(), parentContext );

        // 3)
        String pomToExtend = project.getExtend();

        if ( pomToExtend != null && useParentPom )
        {
            // We must look in the <extend/> element for expressions that may be present as
            //
            // <extend>../project.xml</extend>
            Expression e = JellyUtils.decomposeExpression( pomToExtend, context );
            pomToExtend = e.evaluateAsString( context );
            pomToExtend = MavenUtils.makeAbsolutePath( projectDescriptor.getParentFile(), pomToExtend );
            project.setExtend( pomToExtend );

            File parentPom = new File( pomToExtend );

            Project parent = (Project) parentPoms.get( parentPom.getCanonicalPath() );
            if ( parent == null )
            {
                parent = getNonJellyProject( parentPom, parentContext, true );
                parent.setFile( parentPom );
                parentPoms.put( parentPom.getCanonicalPath(), parent );

                context.setParent( parent.getContext() );
            }

            Properties properties = loadProjectBuildProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );
            properties = loadProjectProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );

            project.mergeParent( parent );
        }

        // Set the created context, and put the project itself in the context. This
        // is how we get the ${pom} reference in the project.xml file to work.
        project.setContext( context );
        context.setProject( project );

        return project;
    }

    /**
     * This is currently used for the reactor but may be generally useful.
     *
     * @@param directory the directory to scan for maven projects
     * @@param includes the pattern that matches a project that you want included
     * @@param excludes the pattern that matches a project that you don't want included
     * @@return a {link List} of {@@link Project}s
     * @@throws MavenException when anything goes wrong.
     */
    public static List getProjects( File directory, String includes, String excludes )
        throws MavenException
    {
        return getProjects( directory, includes, excludes, null );
    }

    /**
     * This is currently used for the reactor but may be generally useful.
     *
     * @@param directory the directory to scan for maven projects
     * @@param includes Patterns to include.
     * @@param excludes Patterns to exclude.
     * @@param context  the parent context
     * @@return a {link List} of {@@link Project}s
     * @@throws MavenException when anything goes wrong. FIXME this is bad
     */
    public static List getProjects( File directory,
                                    String includes,
                                    String excludes,
                                    MavenJellyContext context )
        throws MavenException
    {
        String[] files = getFiles( directory, includes, excludes );

        List projects = new ArrayList();

        for ( int i = 0; i < files.length; i++ )
        {
            Project p = getProject( new File( files[i] ), context );
            projects.add( p );
        }

        return projects;
    }

    /**
     * Create a project bean reader. We use it more than once so we don't want
     * to create it more than once.
     *
     * @@return a {@@link BeanReader} capable of reading {@@link Project projects}
     * @@throws IntrospectionException when creating a bean reader
     * @@throws SAXException when an error occurs parsing the XML
     * @@throws ParserConfigurationException when a JAXP parser can't be created
     */
    private static BeanReader getProjectBeanReader()
        throws IntrospectionException, SAXException, ParserConfigurationException
    {
        if ( projectBeanReader == null )
        {
            projectBeanReader = createBeanReader( Project.class );
        }

        return projectBeanReader;
    }

    /**
     * Take the POM and interpolate the value of the project's context to create
     * a new version of the POM with expanded context values.
     *
     * @@param project the maven POM
     * @@return Jelly interpolated project.
     * @@throws IntrospectionException when there are errors creating a string from the project for interpolation
     * @@throws SAXException when reading the interpolated POM fails
     * @@throws IOException when there are errors reading
     * @@throws ParserConfigurationException when a JAXP parser can't be created
     */
    private static Project getJellyProject( Project project )
        throws IOException, SAXException, IntrospectionException, ParserConfigurationException
    {
        // Keep a copy of the original context
        MavenJellyContext originalContext = project.getContext();

        // We don't want any taglib references in the context or Jelly
        // gets confused. All we want are the variables for interpolation. We
        // can change this but I think we would like to avoid general Jelly
        // idiom in the POM anyway.
        JellyContext context = new JellyContext();
        JellyUtils.populateVariables( context, originalContext );

        // We don't want the context or the parent being written out into the XML which
        // is the interpolated POM.
        project.setContext( null );
        Project parent = project.getParent();
        project.setParent( null );

        // Interpolate
        project = getInterpolatedPOM(project, context);

        // Restore parent and context
        project.setParent( parent );
        project.setContext( originalContext );
        project.getContext().setProject( project );

        return project;
    }

    /**
     * Get the POM with all variables resolved.
     * @@param project the project to resolve
     * @@param context the context to retrieve variables from
     * @@return a project with no unresolved elements.
     * @@throws IOException if there is an error parsing the project
     * @@throws SAXException if there is a sax error parsing the project
     * @@throws IntrospectionException when there are errors creating a string from the project
     * @@throws ParserConfigurationException when a JAXP parser can't be created
     */
    private static Project getInterpolatedPOM(Project project, JellyContext context)
        throws IOException, SAXException, IntrospectionException, ParserConfigurationException
    {
        String projectString = getProjectString(project);
        Expression e = JellyUtils.decomposeExpression( projectString, context );
        String newProjectString = e.evaluateAsString( context );
        project = (Project) getProjectBeanReader().parse( new StringReader( newProjectString ) );
        return project;
    }

    /**
     * @@return an {@@link InputStream} for the given project
     * @@param project a {@@link Project maven project}
     * @@throws MavenException when reading the project
     */
    public static InputStream getProjectInputStream( Project project )
    throws MavenException
    {
        try
        {
            return new StringInputStream( getProjectString( project ) );
        }
        catch (IOException e)
        {
            throw new MavenException("Error writing the project", e);
        }
        catch (IntrospectionException e)
        {
            throw new MavenException("Error introspecting the project", e);
        }
        catch (SAXException e)
        {
            throw new MavenException("Error parsing the project as XML", e);
        }
    }

    /**
     * Create an XML string from a project.
     *
     * @@param project MavenSession project to turn into an XML representation.
     * @@return XML representation of the project
     * @@throws IOException writing the project fails
     * @@throws IntrospectionException when there are problems writing the project bean as a string
     * @@throws SAXException when there are problems writing the project bean as a string
     */
    private static String getProjectString( Project project ) throws IOException, IntrospectionException, SAXException
    {
        ByteArrayOutputStream projectStream = new ByteArrayOutputStream();
        BeanWriter beanWriter = new BeanWriter( projectStream );
        beanWriter.setXMLIntrospector( createXMLIntrospector() );

        beanWriter.setWriteIDs( true );
        beanWriter.write( project );

        return projectStream.toString( System.getProperty( "file.encoding" ) );
    }

    /**
     * Get a set of files from a specifed directory with a set of includes.
     *
     * @@param directory Directory to scan.
     * @@param includes Comma separated list of includes.
     * @@return files
     */
    public static String[] getFiles( File directory, String includes )
    {
        return getFiles( directory, includes, null );
    }

    /**
     * Get a set of files from a specifed directory with a set of includes.
     *
     * @@param directory Directory to scan.
     * @@param includes Comma separated list of includes.
     * @@param excludes Comma separated list of excludes.
     * @@return files
     */
    public static String[] getFiles( File directory, String includes, String excludes )
    {
        String[] includePatterns = null;
        if ( includes != null )
        {
            includePatterns = StringUtils.split( includes, "," );
        }

        String[] excludePatterns = null;
        if ( excludes != null )
        {
            excludePatterns = StringUtils.split( excludes, "," );
        }

        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir( directory );
        directoryScanner.setIncludes( includePatterns );
        directoryScanner.setExcludes( excludePatterns );
        directoryScanner.scan();
        String[] files = directoryScanner.getIncludedFiles();

        for ( int i = 0; i < files.length; i++ )
        {
            files[i] = new File( directory, files[i] ).getAbsolutePath();
        }

        return files;
    }


    /**
     * Creates a new instance of BeanReader
     *
     * @@param clazz the class to register with the reader
     * @@return a {@@link BeanReader bean reader}
     * @@throws IntrospectionException when there are errors registering the provided class
     * @@throws SAXException when there are errors getting an XML reader
     * @@throws ParserConfigurationException when there are errors getting an XML reader
     */
    public static BeanReader createBeanReader( Class clazz )
    throws IntrospectionException, SAXException, ParserConfigurationException
    {
        BeanReader beanReader = new BeanReader( getXMLReader() );
        beanReader.setRules( new ExtendedBaseRules() );
        beanReader.addRule( "*/properties/?", new MetaPropertiesRule() );

        beanReader.setXMLIntrospector( getXMLIntrospector() );
        beanReader.registerBeanClass( clazz );

        return beanReader;
    }

    /**
     * If caching is enabled then this method will return a pooled introspector
     *
     * @@return XMLIntrospector used for processing the MavenSession xml-based POM.
     */
    public static XMLIntrospector getXMLIntrospector()
    {
        if ( cacheIntrospector )
        {
            if ( singletonIntrospector == null )
            {
                singletonIntrospector = createXMLIntrospector();
            }
            return singletonIntrospector;
        }
        return createXMLIntrospector();
    }

    /**
     * Create the type of XMLIntrospector that is used to read all MavenSession style
     * XML files.
     *
     * @@return Betwixt XMLIntrospector
     */
    private static XMLIntrospector createXMLIntrospector()
    {
        XMLIntrospector introspector = new XMLIntrospector();

        introspector.setAttributesForPrimitives( false );
        introspector.setElementNameMapper( new DecapitalizeNameMapper() );

        return introspector;
    }

    /**
     * Get the XMLReader to use for processing XML related resources.
     *
     * @@return an XMLReader which is pooled per thread
     * @@throws SAXException when the reader can't be created
     * @@throws ParserConfigurationException when the reader can't be created
     */
    public static XMLReader getXMLReader() throws SAXException, ParserConfigurationException
    {
        XMLReader parser = (XMLReader) xmlReaderPool.get();
        if ( parser == null )
        {
            parser = createXMLReader();
            xmlReaderPool.set( parser );
        }
        return parser;
    }

    /**
     * Creates a new XMLReader instance
     *
     * @@return XMLReader used for parsing XML related maven resource.
     * @@throws SAXException If there are errors creating the reader
     * @@throws ParserConfigurationException If there are errors creating the SAX parser to use
     */
    private static XMLReader createXMLReader() throws SAXException, ParserConfigurationException
    {
        SAXParserFactory factory = SAXParserFactory.newInstance();

        factory.setNamespaceAware( true );

        return factory.newSAXParser().getXMLReader();
    }

    /**
     * Take a dominant and recessive Map and merge the key:value
     * pairs where the recessive Map may add key:value pairs to the dominant
     * Map but may not override any existing key:value pairs.
     *
     * If we have two Maps, a dominant and recessive, and
     * their respective keys are as follows:
     *
     *  dominantMapKeys = { a, b, c, d, e, f }
     * recessiveMapKeys = { a, b, c, x, y, z }
     *
     * Then the result should be the following:
     *
     * resultantKeys = { a, b, c, d, e, f, x, y, z }
     *
     * @@param dominantMap Dominant Map.
     * @@param recessiveMap Recessive Map.
     * @@return The result map with combined dominant and recessive values.
     */
    public static Map mergeMaps( Map dominantMap, Map recessiveMap )
    {
        Map result = new HashMap();

        if ( dominantMap == null && recessiveMap == null )
        {
            return null;
        }

        if ( dominantMap != null && recessiveMap == null )
        {
            return dominantMap;
        }

        if ( dominantMap == null )
        {
            return recessiveMap;
        }

        // Grab the keys from the dominant and recessive maps.
        Set dominantMapKeys = dominantMap.keySet();
        Set recessiveMapKeys = recessiveMap.keySet();

        // Create the set of keys that will be contributed by the
        // recessive Map by subtracting the intersection of keys
        // from the recessive Map's keys.
        Collection contributingRecessiveKeys =
            CollectionUtils.subtract( recessiveMapKeys,
                                      CollectionUtils.intersection( dominantMapKeys, recessiveMapKeys ) );

        result.putAll( dominantMap );

        // Now take the keys we just found and extract the values from
        // the recessiveMap and put the key:value pairs into the dominantMap.
        for ( Iterator i = contributingRecessiveKeys.iterator(); i.hasNext();)
        {
            Object key = i.next();
            result.put( key, recessiveMap.get( key ) );
        }

        return result;
    }

    /**
     * Take a series of <code>Map</code>s and merge
     * them where the ordering of the array from 0..n
     * is the dominant order.
     *
     * @@param maps An array of Maps to merge.
     * @@return Map The result Map produced after the merging process.
     */
    public static Map mergeMaps( Map[] maps )
    {
        Map result;

        if ( maps.length == 0 )
        {
            result = null;
        }
        else if ( maps.length == 1 )
        {
            result = maps[0];
        }
        else
        {
            result = mergeMaps( maps[0], maps[1] );

            for ( int i = 2; i < maps.length; i++ )
            {
                result = mergeMaps( result, maps[i] );
            }
        }

        return result;
    }

    /**
     * Load the build.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectBuildProperties( File directory )
    {
        // project build properties
        File projectBuildPropertiesFile =
            new File( directory, "build.properties" );

        log.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
        return loadProperties( projectBuildPropertiesFile );
    }

    /**
     * Load the project.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectProperties( File directory )
    {
        // project properties
        File projectPropertiesFile =
            new File( directory, "project.properties" );

        log.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
        return loadProperties( projectPropertiesFile );
    }

    /**
     * Create a jelly context given a descriptor directory.
     *
     * @@param descriptorDirectory The directory from which to pull the standard maven
     * properties files from.
     * @@return The generated maven based on the contents of the standard maven
     * properties files.
     */
    public static MavenJellyContext createContext( File descriptorDirectory )
    {
        return createContext( descriptorDirectory, null );
    }

    /**
     * Create a jelly context given a descriptor directory and parent
     * jelly context.
     *
     * @@param descriptorDirectory The directory from which to pull the standard maven
     * properties files from.
     * @@param parentContext The parent jelly context.
     * @@todo should premerge driver, etc if they are being kept
     * @@return The generated maven based on the contents of the standard maven
     * properties files.
     */
    public static MavenJellyContext createContext( File descriptorDirectory, 
                                                   MavenJellyContext parentContext )
    {
        // System properties
        Properties systemProperties = System.getProperties();

        // User build properties
        File userBuildPropertiesFile =
            new File( System.getProperty( "user.home" ), "build.properties" );

        log.debug( "Using userBuildPropertiesFile: " + userBuildPropertiesFile.getAbsolutePath() );
        Properties userBuildProperties = loadProperties( userBuildPropertiesFile );

        Properties projectProperties = loadProjectProperties( descriptorDirectory );
        Properties projectBuildProperties = loadProjectBuildProperties( descriptorDirectory );

        Properties driverProperties = loadProperties(
            MavenUtils.class.getResourceAsStream(
                MavenConstants.DRIVER_PROPERTIES ) );

        Properties defaultProperties = loadProperties(
            MavenUtils.class.getResourceAsStream(
                MavenConstants.DEFAULTS_PROPERTIES ) );

        Map result = MavenUtils.mergeMaps( new Map[]
        {
            systemProperties,
            userBuildProperties,
            projectBuildProperties,
            projectProperties,
            driverProperties
        } );

        MavenJellyContext context;

        // If we have a parent we eventually want what values it can provide but
        // we turn inheritance off momentarily until we finish integrating the
        // child's context values into the jelly context because we want the
        // child values to win and only use the parent in the event the
        // child cannot provide the value.

        if ( parentContext != null )
        {
            context = new MavenJellyContext( parentContext );
            context.setInherit( false );

            MavenUtils.integrateMapInContext( result, context );

            // Turn inheritance back on to make the parent's values visible.
            context.setInherit( true );

            //add in the default.properties with defaults, but in inheritance mode.
            MavenUtils.integrateMapInContext( defaultProperties, context );
        }
        else
        {
            context = new MavenJellyContext();

            //integrate everything else...
            MavenUtils.integrateMapInContext( result, context );

            //integrate defaults...
            MavenUtils.integrateMapInContext( defaultProperties, context );

            // Turn inheritance back on to make the parent's values visible.
            context.setInherit( true );
        }


        // Set the basedir value in the context.
        context.setVariable( "basedir", descriptorDirectory.getAbsolutePath() );

        // deliberately use the original base directory for these variables
        context.resolveRelativePaths( new File( System.getProperty( "user.dir" ) ) );

        return context;
    }

    /**
     * Integrate a Map of key:value pairs into a <code>MavenJellyContext</code>.
     * The values in the Map may be <code>CompositeExpression</code>s that need
     * to be evaluated before being placed into the context.
     *
     * @@param map Map to integrate into the provided jelly context.
     * @@param context Jelly context to integrate the map into.
     */
    public static void integrateMapInContext( Map map, MavenJellyContext context )
    {
        if ( map == null )
        {
            return;
        }

        JexlExpressionFactory factory = new JexlExpressionFactory();

        for ( Iterator i = map.keySet().iterator(); i.hasNext();)
        {
            String key = (String) i.next();
            Object value;

            if ( context.getVariable( key ) == null )
            {
                value = map.get( key );

                try
                {
                    String literalValue = (String) value;
                    Expression expr = CompositeExpression.parse( literalValue, factory );

                    if ( expr != null )
                    {
                        value = expr;
                    }
                    else
                    {
                        value = literalValue;
                    }
                }
                catch ( Exception e )
                {
                    // do nothing.
                    log.debug( "Unexpected error evaluating expression", e );
                }
                context.setVariable( key, value );
            }
        }
    }

    /**
     * Load properties from a <code>File</code>.
     *
     * @@param file Propertie file to load.
     * @@return The loaded Properties.
     */
    private static Properties loadProperties( File file )
    {
        try
        {
            if ( file.exists() )
            {
                return loadProperties( new FileInputStream (file) );
            }
        }
        catch ( Exception e )
        {
            // ignore
            log.debug("Unexpected error loading properties", e);
        }

        return null;
    }

    /**
     * Load properties from an <code>InputStream</code>.
     *
     * @@param is InputStream from which load properties.
     * @@return The loaded Properties.
     */
    private static Properties loadProperties( InputStream is )
    {
        try
        {
            Properties properties = new Properties();
            properties.load( is );

            for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )
            {
                String property = ( String ) i.next();
                properties.setProperty( property, properties.getProperty( property ).trim() );
            }

            return properties;
        }
        catch ( IOException e )
        {
            // ignore
            log.debug("Unexpected exception loading properties", e);
        }
        finally
        {
            try
            {
                if ( is != null )
                {
                    is.close();
                }
            }
            catch ( IOException e )
            {
                // ignore
                log.debug("Unexpected exception loading properties", e);
            }
        }

        return null;
    }

    // ------------------------------------------------------------
    // M E T A  P R O P E R T I E S  R U L E  C L A S S
    // ------------------------------------------------------------

    /**
     * A simple digester rule for populating an object in the POM
     * with meta properties.
     */
    static class MetaPropertiesRule
        extends Rule
    {
        /** The body of the found property. */
        private String value;

        /**
         * Constructor for the InfoRule object
         */
        public MetaPropertiesRule()
        {
        }

        /**
         * Process the body of this element.
         *
         * @@param namespace the namespace
         * @@param name the tag name
         * @@param text the body text
         */
        public void body(String namespace, String name, String text)
        {
            this.value = text;
        }

        /**
         * Finish off this element.
         * @@param namespace the namespace of the element
         * @@param elementName the name of the element
         */
        public void end(String namespace, String elementName)
        {
            BaseObject baseObject = (BaseObject) getDigester().peek();
            String name = getDigester().getCurrentElementName();
            baseObject.addProperty( name + ":" + value );
        }
    }

    /** Resource bundle with user messages. */
    private static ResourceBundle messages;

    /**
     * Load MavenSession user messages from a resource bundle given the
     * user's locale.
     * @@todo Move locale tools into their own class.
     */
    private static void loadMessages()
    {
        try
        {
            // Look for the message bundle corresponding to the user's locale.
            messages = ResourceBundle.getBundle( "org/apache/maven/messages/messages" );
        }
        catch ( MissingResourceException e )
        {
            // If we can't find the appropriate message bundle for the locale then
            // we will fall back to English.
            messages = ResourceBundle.getBundle( "org/apache/maven/messages/messages",
                                                 Locale.ENGLISH );
        }
    }

    /**
     * Retrieve a user message.
     *
     * @@param messageId Id of message type to use.
     * @@return Message for the user's locale.
     */
    public static String getMessage( String messageId )
    {
        return getMessage( messageId, null );
    }

    /**
     * Retrieve a user message.
     *
     * @@param messageId Id of message type to use.
     * @@param variable Value to substitute for ${1} in the given message.
     * @@return Message for the user's locale.
     */
    public static String getMessage( String messageId, Object variable )
    {
        if ( messages == null )
        {
            loadMessages();
        }

        if ( variable == null )
        {
            return messages.getString( messageId );
        }
        else
        {
            return StringUtils.replace( messages.getString( messageId ),
                                        "${1}",
                                        variable.toString() );
        }
    }

    /**
     * Resolve directory against a base directory if it is not already absolute.
     * @@param basedir the base directory for relative paths
     * @@param dir the directory to resolve
     * @@throws IOException if canonical path fails
     * @@return the canonical path of the directory if not absolute
     */
    public static String makeAbsolutePath( File basedir, String dir ) throws IOException
    {
        File f = new File( dir );
        if ( !(f.isAbsolute()) )
        {
            return new File( basedir, dir ).getCanonicalPath();
        }
        else
        {
            return f.getCanonicalPath();
        }
    }

    /**
     * Convert an absolute path to a relative path if it is under a given base directory.
     * @@param basedir the base directory for relative paths
     * @@param path the directory to resolve
     * @@return the relative path
     * @@throws IOException if canonical path fails
     */
    public static String makeRelativePath( File basedir, String path ) throws IOException
    {
        String canonicalBasedir = basedir.getCanonicalPath();
        String canonicalPath = new File( path ).getCanonicalPath();

        if ( canonicalPath.equals(canonicalBasedir) )
        {
            return ".";
        }

        if ( canonicalPath.startsWith( canonicalBasedir ) )
        {
            if ( canonicalPath.charAt( canonicalBasedir.length() ) == File.separatorChar )
            {
                canonicalPath = canonicalPath.substring( canonicalBasedir.length() + 1 );
            }
            else
            {
                canonicalPath = canonicalPath.substring( canonicalBasedir.length() );
            }
        }
        return canonicalPath;
    }

    /**
     * Get a list of goals from a CSV list.
     * @@param goalCsv the goals
     * @@return the list of goal names
     */
    public static List getGoalListFromCsv( String goalCsv )
    {
        StringTokenizer tok = new StringTokenizer( goalCsv, "," );
        List goals = new ArrayList();
        while ( tok.hasMoreTokens() )
        {
            goals.add( tok.nextToken() );
        }
        return goals;
    }

    /**
     * Debugging function.
     * @@param classLoader the class loader
     */
    public static void displayClassLoaderContents( ForeheadClassLoader classLoader )
    {
        System.out.println( "ClassLoader name: " + classLoader.getName() );

        URL[] urls = classLoader.getURLs();

        for ( int i = 0; i < urls.length; i++ )
        {
            System.out.println( "urls[" + i + "] = " + urls[i] );
        }

        ClassLoader parent = classLoader.getParent();
        if ( parent != null && parent instanceof ForeheadClassLoader )
        {
            System.out.println( "Displaying Parent classloader: " );
            displayClassLoaderContents( ( ForeheadClassLoader ) classLoader.getParent());
        }
    }

}
@


1.110
log
@merge changes between MAVEN_1_0_RC2 and MAVEN-1_0-BRANCH-merge-3
@
text
@d21 1
d75 1
a75 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.109
log
@merge changes on MAVEN-1_0-BRANCH between MAVEN-1_0-BRANCH-merge-2 and MAVEN-1_0-RC2
@
text
@a35 1
import org.apache.maven.jelly.MavenExpressionFactory;
d44 1
d46 2
d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a83 3
    /** Internal encoding used for Jelly interpolation. */
    private static final String INTERNAL_ENCODING = "ISO-8859-1";

a95 3
    /** Maven Expression Factory. */
    private static MavenExpressionFactory mavenExpressionFactory = new MavenExpressionFactory();

d104 1
a104 1
     * @@throws Exception when any errors occur
d107 1
a107 1
        throws Exception
d117 1
a117 1
     * @@throws Exception when any error happens. FIXME
d120 1
a120 1
        throws Exception
d133 1
a133 1
     * @@throws Exception when any errors occur - TODO [RC2] bad
d138 1
a138 1
        throws Exception
d140 6
a145 3
        Project project = getNonJellyProject( projectDescriptor, parentContext, useParentPom );
        project = getJellyProject( project );
        project.setFile( projectDescriptor );
d147 19
a165 2
        // Fully initialize the project.
        project.initialize();
d191 2
a192 1
     * @@throws Exception when any errors occur - TODO [RC2] bad
d197 1
a197 1
        throws Exception
d200 9
a208 1
        Project project = (Project) getProjectBeanReader().parse( projectDescriptor );
d221 1
a221 1
            Expression e = JellyUtils.decomposeExpression( pomToExtend, mavenExpressionFactory, context );
d261 1
a261 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d264 1
a264 1
        throws Exception
d277 1
a277 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d283 1
a283 1
        throws Exception
d303 3
a305 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d308 1
a308 1
        throws Exception
d324 4
a327 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d330 1
a330 1
        throws Exception
d340 1
a340 1
        context.setVariables( originalContext.getVariables() );
a363 1
     * @@throws Exception when there is an error getting the project as a string
d366 2
d370 1
a370 1
        throws Exception, IOException, SAXException
d373 1
a373 1
        Expression e = JellyUtils.decomposeExpression( projectString, mavenExpressionFactory, context );
d382 1
a382 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d385 1
a385 1
        throws Exception
d387 16
a402 1
        return new StringInputStream( getProjectString( project ) );
d410 3
a412 1
     * @@throws Exception when anything goes wrong. FIXME this is bad
d414 1
a414 2
    public static String getProjectString( Project project )
        throws Exception
d423 1
a423 4
        // We do not care what the original encoding was originally. This
        // is all completely internal. Our StringInputStream requires
        // everything to be encoded in "ISO-8859-1".
        return projectStream.toString( INTERNAL_ENCODING );
d481 3
a483 3
     * @@throws Exception when an error occurs trying to determine
     *      properties of the class provided
     * @@throws Exception when anything goes wrong. FIXME this is bad
d486 1
a486 1
        throws Exception
d536 2
a537 1
     * @@throws Exception If an error occurs while creating the XMLReader.
d539 1
a539 2
    public static XMLReader getXMLReader()
        throws Exception
d554 2
a555 1
     * @@throws Exception If an error occurs while creating the reader.
d557 1
a557 2
    private static XMLReader createXMLReader()
        throws Exception
d715 1
a715 1
    public static MavenJellyContext createContext( File descriptorDirectory,
d787 3
d817 1
a817 1
                String literalValue = (String) map.get( key );
d821 1
a831 2

                    context.setVariable( key, value );
d836 1
a836 1
                    log.debug("Unexpected error evaluating expression", e);
d838 1
d879 7
a938 1
         * @@throws Exception when any errors occur
a940 1
            throws Exception
a948 1
         * @@throws Exception when any errors occur
a950 1
            throws Exception
d1088 1
a1088 2
     * @@param project
     * @@param classLoader
@


1.108
log
@merge in 1.0 branch
@
text
@d4 1
a4 1
 * The Apache Software License, Version 1.1
d6 3
a8 2
 * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
 * reserved.
d10 1
a10 46
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Apache Maven" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Apache Maven", nor may "Apache" appear in their name, without
 *    prior written permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
d12 5
d72 1
a72 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d206 1
a206 1
                parent = getNonJellyProject( parentPom, null, true );
d806 4
a809 1
            return loadProperties( new FileInputStream (file) );
d1043 2
@


1.107
log
@style
@
text
@d59 1
a63 1
import org.apache.commons.collections.BeanMap;
d91 1
d103 1
d110 2
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d114 1
d119 1
a119 1
    private static final Log logger = LogFactory.getLog( MavenUtils.class );
d170 26
a195 1
     * context. We are doing several things when creating a POM object, the phases
d206 1
a206 1
     * 3) We check to see if the <extend> tag is being employed. If so, the parent
d210 1
a210 7
     *
     * 4) The POM we have at this point is then processed through Jelly.
     *
     * 5) The project is handed the reference to the File that was used to create
     *    the project itself.
     *
     * @@param projectDescriptor a maven project.xml {@@link File}
d213 2
a214 2
     * @@return the MavenSession project object for the given project descriptor
     * @@throws Exception when any errors occur
d216 3
a218 3
    public static Project getProject( File projectDescriptor,
                                      MavenJellyContext parentContext,
                                      boolean useParentPom )
a220 2
        //if ( pom.get())

d225 2
a226 2
        MavenJellyContext context = MavenUtils.createContext( projectDescriptor.getParentFile(),
                                                              parentContext );
d245 3
a247 1
                parent = (Project) getProjectBeanReader().parse( parentPom );
d249 1
a249 4
                if ( parent != null )
                {
                    parentPoms.put( parentPom.getCanonicalPath(), parent );
                }
d252 4
a255 2
            // This is very slow. A BCEL solution would be very nice here.
            project = (Project) mergeBeans( project, parent );
d257 1
a257 3
            // Now let's do some magic with dependencies. We take all
            // the parent's dependencies and put them in with the childs.
            project.addParentDependencies( parent.getDependencies() );
a264 9
        // 4)
        project = getJellyProject( project );

        // 5)
        project.setFile( projectDescriptor );

        // Fully initialize the project.
        project.initialize();

d272 2
a273 2
     * @@param includes the pattern that matches a project
     * @@param context the parent context
d277 1
a277 1
    public static List getProjects( File directory, String includes, MavenJellyContext context )
d280 1
a280 1
        return getProjects( directory, includes, null, context );
d341 1
a341 2
        // Save the original context because we null it temporarly
        // while we funnel it through betwixt.
d351 1
a351 1
        // We don't want the context being written out into the XML which
d354 4
d360 2
a384 16
//      Script script = JellyUtils.compileScript( getProjectInputStream(project),
//                                                context,
//                                                INTERNAL_ENCODING );
//
//      // Now run the script against the fully populated context so all the
//      // values are filled in correctly.
//      ByteArrayOutputStream baos = new ByteArrayOutputStream();
//      Writer writer = new BufferedWriter( new OutputStreamWriter( baos, INTERNAL_ENCODING ) );
//      XMLOutput output = XMLOutput.createXMLOutput( writer );
//      script.run( context, output );
//      writer.close();
//
//      // Read in the the project.xml contents with the interpolated values and
//      // put back the original context with all the values that have been populated
//      // but change the project in the context to the newly interpolated version.
//      project = (Project) getProjectBeanReader().parse( new StringReader( baos.toString() ) );
a421 80
     * Merge a child and parent Project object.
     *
     * @@param child child object
     * @@param parent the maven project
     * @@return the child after properties from the parent are merged
     */
    private static Object mergeBeans( Object child, Object parent )
    {
        BeanMap parentBeanMap = new BeanMap( parent );
        BeanMap childBeanMap = new BeanMap( child );

        for ( Iterator i = parentBeanMap.keySet().iterator(); i.hasNext();)
        {
            // Take the property for the parent and insert it
            // into the child bean map.
            String property = (String) i.next();

            try
            {
                // If the childs property is null then take it from
                // the parent.
                Object c = childBeanMap.get( property );
                Object p = parentBeanMap.get( property );

                if ( valueNeedsPopulating( c ) )
                {
                    childBeanMap.put( property, p );
                }
                else if ( c != null && p != null && !valuePrimitive( c ) )
                {
                    Object mergedBean = mergeBeans( c, p );
                    childBeanMap.put( property, mergedBean );
                }
            }
            catch ( IllegalArgumentException e )
            {
                // There is no write method for this property.
                logger.debug("No write method for property", e);
            }
        }
        return child;
    }

    /**
     * Test if a value is a primitive or not
     *
     * @@param o the value to test
     * @@return true if o is a Boolean, String, Class or Integer.
     */
    private static boolean valuePrimitive( Object o )
    {
        if ( o instanceof Boolean || o instanceof String
            || o instanceof Class || o instanceof Integer )
        {
            return true;
        }
        return false;
    }

    /**
     * Check a child value to see if it needs populating with the parent value.
     * The constructor sets List values to [] so we have to check those.
     *
     * @@param o a child value
     * @@return true if the child value is an empty collection or null
     */
    private static boolean valueNeedsPopulating( Object o )
    {
        if ( o instanceof Collection && ( (Collection) o ).size() == 0 )
        {
            return true;
        }
        else
        {
            // it needs populating if it's null
            return (o == null);
        }
    }

    /**
d594 1
a594 1
        if ( dominantMap == null && recessiveMap != null )
d633 1
a633 1
        Map result = null;
d657 30
d706 1
d720 1
a720 1
        logger.debug( "Using userBuildPropertiesFile: " + userBuildPropertiesFile.getAbsolutePath() );
d723 2
a724 13
        // project build properties
        File projectBuildPropertiesFile =
            new File( descriptorDirectory, "build.properties" );

        logger.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
        Properties projectBuildProperties = loadProperties( projectBuildPropertiesFile );

        // project properties
        File projectPropertiesFile =
            new File( descriptorDirectory, "project.properties" );

        logger.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
        Properties projectProperties = loadProperties( projectPropertiesFile );
d727 1
a727 1
            MavenUtils.class.getClassLoader().getResourceAsStream(
d731 1
a731 1
            MavenUtils.class.getClassLoader().getResourceAsStream(
d761 1
a761 1
            //add in the driver.properties with defaults, but in inheritance mode.
d780 1
a780 1
        context.setVariable( "basedir", descriptorDirectory.getPath() );
d829 1
a829 1
                    logger.debug("Unexpected error evaluating expression", e);
d850 1
a850 1
            logger.debug("Unexpected error loading properties", e);
d873 1
a873 1
            logger.debug("Unexpected exception loading properties", e);
d887 1
a887 1
                logger.debug("Unexpected exception loading properties", e);
d1055 39
@


1.107.4.1
log
@migrate "unstable" branch
@
text
@a58 21
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;

import javax.xml.parsers.SAXParserFactory;

d63 1
d84 19
d108 1
a108 2
 * @@author <a href="mailto:brett@@apache.org">Brett Porter</a>
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a110 1
 * @@todo [RC2] split getProject (project.properties + defaults) != getPluginProject (plugin.properties only)
d184 3
a186 1
     * @@todo should cache all project xml files with the right context , merged down to the leafs in inheritence
a205 1
        
d225 5
a229 2
                parent.setFile( parentPom );
                parentPoms.put( parentPom.getCanonicalPath(), parent );
d232 2
a233 4
            Properties properties = loadProjectBuildProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );
            properties = loadProjectProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );
d235 3
a237 1
            project.mergeParent( parent );
d247 2
d261 2
a262 2
     * @@param includes the pattern that matches a project that you want included
     * @@param excludes the pattern that matches a project that you don't want included
d266 1
a266 1
    public static List getProjects( File directory, String includes, String excludes )
d269 1
a269 1
        return getProjects( directory, includes, excludes, null );
d341 1
a341 1
        // We don't want the context or the parent being written out into the XML which
a343 4
        Project parent = project.getParent();
        project.setParent( null );
        
        // Interpolate
d345 1
a345 3
        
        // Restore parent and context
        project.setParent( parent );
d369 16
d422 80
d674 1
a674 1
        if ( dominantMap == null )
d713 1
a713 1
        Map result;
a736 30
     * Load the build.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectBuildProperties( File directory )
    {
        // project build properties
        File projectBuildPropertiesFile =
            new File( directory, "build.properties" );

        logger.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
        return loadProperties( projectBuildPropertiesFile );
    }

    /**
     * Load the project.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectProperties( File directory )
    {
        // project properties
        File projectPropertiesFile =
            new File( directory, "project.properties" );

        logger.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
        return loadProperties( projectPropertiesFile );
    }

    /**
a755 1
     * @@todo should premerge driver, etc if they are being kept
d772 13
a784 2
        Properties projectProperties = loadProjectProperties( descriptorDirectory );
        Properties projectBuildProperties = loadProjectBuildProperties( descriptorDirectory );
d840 2
a841 2
        context.setVariable( "basedir", descriptorDirectory.getAbsolutePath() );
        
d883 1
a883 1
                    
a1113 16
    }

    /**
     * Get a list of goals from a CSV list.
     * @@param goalCsv the goals
     * @@return the list of goal names
     */
    public static List getGoalListFromCsv( String goalCsv )
    {
        StringTokenizer tok = new StringTokenizer( goalCsv, "," );
        List goals = new ArrayList();
        while ( tok.hasMoreTokens() ) 
        {
            goals.add( tok.nextToken() );
        }
        return goals;
@


1.107.4.2
log
@formatting, commenting
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d207 1
@


1.107.4.3
log
@Fix bug with werkz, better handling of plugins not being found, fix bug when no project.xml present
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a227 6
// TODO [RC2] - check -vvv-
        MavenJellyContext pContext = MavenUtils.createContext( projectDescriptor.getParentFile(),
                                                              parentContext );
parent.setContext(pContext);
context.setParent(pContext);
// TODO [RC2] - check -^^^-
@


1.107.4.4
log
@cleanup project creation, make inheritence work
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d118 1
a118 1
    private static final Log log = LogFactory.getLog( MavenUtils.class );
d169 1
a169 26
     * context. 
     *
     * @@param projectDescriptor a maven project.xml {@@link File}
     * @@param parentContext the parent context for the new project
     * @@param useParentPom whether a parent project should be respected
     * @@return the MavenSession project object for the given project descriptor
     * @@throws Exception when any errors occur - TODO [RC2] bad
     */
    public static Project getProject( File projectDescriptor,
                                      MavenJellyContext parentContext,
                                      boolean useParentPom )
        throws Exception
    {
        Project project = getNonJellyProject( projectDescriptor, parentContext, useParentPom );
        project = getJellyProject( project );
        project.setFile( projectDescriptor );

        // Fully initialize the project.
        project.initialize();

        return project;
    }

    /**
     *  Get a project, but not a Jelly-ised project. ie Don't evaluate the
     *  variables. We are doing several things when creating a POM object, the phases
d180 1
a180 1
     * 3) We check to see if the &lt;extend&gt; tag is being employed. If so, the parent
d184 5
a188 1
     * @@param projectDescriptor the project file
d191 2
a192 2
     * @@return the project
     * @@throws Exception when any errors occur - TODO [RC2] bad
d194 3
a196 3
    private static Project getNonJellyProject( File projectDescriptor,
                                               MavenJellyContext parentContext,
                                               boolean useParentPom )
d199 2
d205 2
a206 2
        MavenJellyContext context = MavenUtils.createContext( projectDescriptor.getParentFile(), parentContext );

d225 1
a225 1
                parent = getNonJellyProject( parentPom, null, true );
d228 6
a233 2

                context.setParent( parent.getContext() );
d249 7
d332 2
a333 1
        // Keep a copy of the original context
d659 1
a659 1
        log.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
d674 1
a674 1
        log.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
d712 1
a712 1
        log.debug( "Using userBuildPropertiesFile: " + userBuildPropertiesFile.getAbsolutePath() );
d753 1
a753 1
            //add in the default.properties with defaults, but in inheritance mode.
d821 1
a821 1
                    log.debug("Unexpected error evaluating expression", e);
d842 1
a842 1
            log.debug("Unexpected error loading properties", e);
d865 1
a865 1
            log.debug("Unexpected exception loading properties", e);
d879 1
a879 1
                log.debug("Unexpected exception loading properties", e);
@


1.107.4.5
log
@PR: MAVEN-1107
Add / to paths, use correct classloader for maven.jar
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d726 1
a726 1
            MavenUtils.class.getResourceAsStream(
d730 1
a730 1
            MavenUtils.class.getResourceAsStream(
@


1.107.4.6
log
@Code cleanup
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d169 1
a169 1
     * context.
d355 1
a355 1

d358 1
a358 1

d780 1
a780 1

d822 1
a822 1

d1064 1
a1064 1
        while ( tok.hasMoreTokens() )
@


1.107.4.7
log
@Optimize imports, reformatting by IDEA.
@
text
@d59 21
a103 20
import javax.xml.parsers.SAXParserFactory;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;

d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.107.4.8
log
@reinstate useful debugging function
@
text
@a58 1
import com.werken.forehead.ForeheadClassLoader;
a89 1
import java.net.URL;
d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a1068 23

    /**
     * Debugging function.
     * @@param project
     * @@param classLoader
     */
    public static void displayClassLoaderContents( ForeheadClassLoader classLoader )
    {
        URL[] urls = classLoader.getURLs();

        for ( int i = 0; i < urls.length; i++ )
        {
            System.out.println( "urls[" + i + "] = " + urls[i] );
        }

        ClassLoader parent = classLoader.getParent();
        if ( parent != null && parent instanceof ForeheadClassLoader )
        {
            System.out.println( "Displaying Parent classloader: " );
            displayClassLoaderContents( ( ForeheadClassLoader ) classLoader.getParent());
        }
    }

@


1.107.4.9
log
@improve logging output
@
text
@d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d845 1
a845 4
            if ( file.exists() )
            {
                return loadProperties( new FileInputStream (file) );
            }
@


1.107.4.10
log
@fix possible NPE in reactor
@
text
@d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d245 1
a245 1
                parent = getNonJellyProject( parentPom, parentContext, true );
@


1.107.4.11
log
@Update to ASL v.2
@
text
@d4 51
a54 1
 *   Copyright 2001-2004 The Apache Software Foundation.
a55 11
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.107.4.12
log
@show classloader name
@
text
@d72 1
a72 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a1042 2
        System.out.println( "ClassLoader name: " + classLoader.getName() );

@


1.107.4.13
log
@PR: MAVEN-1193
Submitted by: dion gillard
remove "throws Exception"
@
text
@a44 1
import javax.xml.parsers.ParserConfigurationException;
a45 2

import java.beans.IntrospectionException;
d72 1
a72 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d108 1
a108 1
     * @@throws MavenException when any errors occur
d111 1
a111 1
        throws MavenException
d121 1
a121 1
     * @@throws MavenException when any error happens.
d124 1
a124 1
    throws MavenException
d137 1
a137 1
     * @@throws MavenException when any errors occur
d142 1
a142 1
    throws MavenException
d144 3
a146 6
        Project project = null;
        try 
        {
            project = getNonJellyProject( projectDescriptor, parentContext, useParentPom );
            project = getJellyProject( project );
            project.setFile( projectDescriptor );
d148 2
a149 19
            // Fully initialize the project.
            project.initialize();
        }
        catch (IntrospectionException e)
        {
            throw new MavenException("Error creating a string from the project", e);
        }
        catch (IOException e)
        {
            throw new MavenException("Error reading XML or initializing", e);
        }
        catch (ParserConfigurationException e)
        {
            throw new MavenException("Error creating a JAXP Parser", e);
        }
        catch (SAXException e)
        {
            throw new MavenException("Error parsing XML", e);
        }
d175 1
a175 2
     * @@throws MavenException when there are errors reading the descriptor
     * @@throws IOException when resolving file names and paths
d179 2
a180 2
                                               boolean useParentPom ) 
    throws MavenException, IOException
d183 1
a183 9
        Project project = null;
        try
        {
			project = (Project) getProjectBeanReader().parse( projectDescriptor );
        }
        catch (Exception e)
        {
        	throw new MavenException("Error parsing project.xml '" + projectDescriptor.getAbsolutePath() + "'");
        }
d236 1
a236 1
     * @@throws MavenException when anything goes wrong.
d239 1
a239 1
        throws MavenException
d252 1
a252 1
     * @@throws MavenException when anything goes wrong. FIXME this is bad
d258 1
a258 1
        throws MavenException
d278 1
a278 3
     * @@throws IntrospectionException when creating a bean reader
     * @@throws SAXException when an error occurs parsing the XML
     * @@throws ParserConfigurationException when a JAXP parser can't be created
d280 2
a281 1
    private static BeanReader getProjectBeanReader() throws IntrospectionException, SAXException, ParserConfigurationException
d297 1
a297 4
     * @@throws IntrospectionException when there are errors creating a string from the project for interpolation
     * @@throws SAXException when reading the interpolated POM fails
     * @@throws IOException when there are errors reading
     * @@throws ParserConfigurationException when a JAXP parser can't be created
d299 2
a300 2
    private static Project getJellyProject( Project project ) 
    throws IOException, SAXException, IntrospectionException, ParserConfigurationException
d334 1
a336 2
     * @@throws IntrospectionException when there are errors creating a string from the project
     * @@throws ParserConfigurationException when a JAXP parser can't be created
d339 1
a339 1
        throws IOException, SAXException, IntrospectionException, ParserConfigurationException
d351 1
a351 3
     * @@throws IOException when reading the string fails
     * @@throws SAXException when parsing the interpolated POM fails
     * @@throws IntrospectionException when writing the POM to XML
d354 1
a354 1
    throws MavenException
d356 1
a356 16
        try
        {
            return new StringInputStream( getProjectString( project ) );
        }
        catch (IOException e)
        {
            throw new MavenException("Error writing the project",e);
        }
        catch (IntrospectionException e)
        {
            throw new MavenException("Error introspecting the project", e);
        }
        catch (SAXException e)
        {
            throw new MavenException("Error parsing the project as XML", e);
        }
d364 1
a364 3
     * @@throws IOException writing the project fails
     * @@throws IntrospectionException when there are problems writing the project bean as a string
     * @@throws SAXException when there are problems writing the project bean as a string
d366 2
a367 1
    private static String getProjectString( Project project ) throws IOException, IntrospectionException, SAXException
d437 3
a439 3
     * @@throws IntrospectionException when there are errors registering the provided class
     * @@throws SAXException when there are errors getting an XML reader
     * @@throws ParserConfigurationException when there are errors getting an XML reader
d441 2
a442 2
    public static BeanReader createBeanReader( Class clazz ) 
    throws IntrospectionException, SAXException, ParserConfigurationException
d492 1
a492 2
     * @@throws SAXException when the reader can't be created
     * @@throws ParserConfigurationException when the reader can't be created
d494 2
a495 1
    public static XMLReader getXMLReader() throws SAXException, ParserConfigurationException
d510 1
a510 2
     * @@throws SAXException If there are errors creating the reader
     * @@throws ParserConfigurationException If there are errors creating the SAX parser to use
d512 2
a513 1
    private static XMLReader createXMLReader() throws SAXException, ParserConfigurationException
d770 1
a770 1
                value = map.get( key );
d772 1
a772 1
                if ( value instanceof String )
d774 3
a776 1
                    try
d778 1
a778 11
                        String literalValue = (String) value;
                        Expression expr = CompositeExpression.parse( literalValue, factory );
    
                        if ( expr != null )
                        {
                            value = expr;
                        }
                        else
                        {
                            value = literalValue;
                        }
d780 1
a780 1
                    catch ( Exception e )
d782 1
a782 2
                        // do nothing.
                        log.debug( "Unexpected error evaluating expression", e );
d784 7
a791 1
                context.setVariable( key, value );
d885 1
d888 1
d897 1
d900 1
@


1.107.4.14
log
@need to set these properties each time - integrateMap will not override them
@
text
@d75 1
a75 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d827 1
a827 1
                try
d829 4
a832 2
                    String literalValue = (String) value;
                    Expression expr = CompositeExpression.parse( literalValue, factory );
d834 8
a841 3
                    if ( expr != null )
                    {
                        value = expr;
d843 1
a843 1
                    else
d845 2
a846 1
                        value = literalValue;
a847 5
                }
                catch ( Exception e )
                {
                    // do nothing.
                    log.debug( "Unexpected error evaluating expression", e );
@


1.107.4.15
log
@Fix some checkstyle errors
@
text
@d75 1
a75 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d148 1
a148 1
        try
d203 1
a203 1
                                               boolean useParentPom )
d210 1
a210 1
            project = (Project) getProjectBeanReader().parse( projectDescriptor );
d214 1
a214 1
            throw new MavenException("Error parsing project.xml '" + projectDescriptor.getAbsolutePath() + "'");
d314 1
a314 2
    private static BeanReader getProjectBeanReader()
        throws IntrospectionException, SAXException, ParserConfigurationException
d335 2
a336 2
    private static Project getJellyProject( Project project )
        throws IOException, SAXException, IntrospectionException, ParserConfigurationException
d388 3
a390 1
     * @@throws MavenException when reading the project
d401 1
a401 1
            throw new MavenException("Error writing the project", e);
d496 1
a496 1
    public static BeanReader createBeanReader( Class clazz )
d831 1
a831 1

d1089 2
a1090 1
     * @@param classLoader the class loader
@


1.107.4.16
log
@PR: MAVEN-1205
remove function unused, and would cause ClassCastException if used
@
text
@d36 1
d75 1
a75 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d100 3
d228 1
a228 1
            Expression e = JellyUtils.decomposeExpression( pomToExtend, context );
d380 1
a380 1
        Expression e = JellyUtils.decomposeExpression( projectString, context );
a764 2

  // TODO: need an exception for those specified on the command line
@


1.107.4.17
log
@PR: MAVEN-1050
Submitted by: Shinsuke SUGAYA
Use system file encoding for POM
@
text
@d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d84 3
d426 4
a429 1
        return projectStream.toString( System.getProperty( "file.encoding" ) );
d721 1
a721 1
    public static MavenJellyContext createContext( File descriptorDirectory, 
d761 2
@


1.107.4.18
log
@trim properties
@
text
@d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a875 7

            for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )
            {
                String property = ( String ) i.next();
                properties.setProperty( property, properties.getProperty( property ).trim() );
            }

@


1.107.4.19
log
@o enhancements to maven --info
o display help on submitting a bug report if fatal exception thrown
o resolve relative paths for properties such as maven.repo.local
@
text
@d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a785 3

        // deliberately use the original base directory for these variables
        context.resolveRelativePaths( new File( System.getProperty( "user.dir" ) ) );
@


1.107.4.20
log
@improve inheritence tests, fix parent property inheritence.
setVariables( context.getVariables() ) will obviously not pass in properties from a parent
context of context, so these were replaced with an iterating function to fold them in to the
new context (which has an alternative parent context tree).
@
text
@d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d340 1
a340 1
        JellyUtils.populateVariables( context, originalContext );
@


1.107.4.21
log
@Make imports consistent
@
text
@a20 1

d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.107.4.22
log
@PR: MAVEN-1296
Submitted by:	Eric Lapierre
Reviewed by:	Brett Porter
fix for property inheritence in some circumstances
@
text
@d75 1
a75 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d239 4
a242 2
            // Map in the parent context which already has the properties loaded
            integrateMapInContext( parent.getContext().getVariables(), context );
@


1.107.2.1
log
@PR: MAVEN-760
PluginManager changes, and the flow on effects.
@
text
@a58 21
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;

import javax.xml.parsers.SAXParserFactory;

d63 1
d84 19
d108 1
a108 2
 * @@author <a href="mailto:brett@@apache.org">Brett Porter</a>
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a110 1
 * @@todo [RC2] split getProject (project.properties + defaults) != getPluginProject (plugin.properties only)
d184 3
a186 1
     * @@todo should cache all project xml files with the right context , merged down to the leafs in inheritence
a205 1
        
d225 5
a229 2
                parent.setFile( parentPom );
                parentPoms.put( parentPom.getCanonicalPath(), parent );
d232 2
a233 4
            Properties properties = loadProjectBuildProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );
            properties = loadProjectProperties( parentPom.getParentFile() );
            integrateMapInContext( properties, context );
d235 3
a237 1
            project.mergeParent( parent );
d247 2
d261 2
a262 2
     * @@param includes the pattern that matches a project that you want included
     * @@param excludes the pattern that matches a project that you don't want included
d266 1
a266 1
    public static List getProjects( File directory, String includes, String excludes )
d269 1
a269 1
        return getProjects( directory, includes, excludes, null );
d341 1
a341 1
        // We don't want the context or the parent being written out into the XML which
a343 4
        Project parent = project.getParent();
        project.setParent( null );
        
        // Interpolate
d345 1
a345 3
        
        // Restore parent and context
        project.setParent( parent );
d369 16
d422 80
d674 1
a674 1
        if ( dominantMap == null )
d713 1
a713 1
        Map result;
a736 30
     * Load the build.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectBuildProperties( File directory )
    {
        // project build properties
        File projectBuildPropertiesFile =
            new File( directory, "build.properties" );

        logger.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
        return loadProperties( projectBuildPropertiesFile );
    }

    /**
     * Load the project.properties file for a project.
     * @@param directory the directory of the project
     * @@return the properties
     */
    private static Properties loadProjectProperties( File directory )
    {
        // project properties
        File projectPropertiesFile =
            new File( directory, "project.properties" );

        logger.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
        return loadProperties( projectPropertiesFile );
    }

    /**
a755 1
     * @@todo should premerge driver, etc if they are being kept
d772 13
a784 2
        Properties projectProperties = loadProjectProperties( descriptorDirectory );
        Properties projectBuildProperties = loadProjectBuildProperties( descriptorDirectory );
d840 2
a841 2
        context.setVariable( "basedir", descriptorDirectory.getAbsolutePath() );
        
d883 1
a883 1
                    
a1113 16
    }

    /**
     * Get a list of goals from a CSV list.
     * @@param goalCsv the goals
     * @@return the list of goal names
     */
    public static List getGoalListFromCsv( String goalCsv )
    {
        StringTokenizer tok = new StringTokenizer( goalCsv, "," );
        List goals = new ArrayList();
        while ( tok.hasMoreTokens() ) 
        {
            goals.add( tok.nextToken() );
        }
        return goals;
@


1.106
log
@handle path == basedir for makeRelativePath
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d1097 1
a1097 1
        if ( canonicalPath.equals(canonicalBasedir))
@


1.105
log
@Fix tabs
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d1096 6
@


1.104
log
@- Remove unneeded ${basedir}
- Update makeAbsolutePath for return a correct pathname and not a mixture of slash/backslash for separator on windows.

Now, if we use a relative path or an absolute path, we obtain the same string for absolute path.
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d829 1
a829 1
        MavenUtils.integrateMapInContext( result, context );
d834 2
a835 2
        // Turn inheritance back on to make the parent's values visible.
        context.setInherit( true );
@


1.103
log
@Fix documentation.
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d1074 2
a1075 1
        if ( !(new File( dir ).isAbsolute()) )
d1079 4
a1082 1
        return dir;
@


1.102
log
@Remove local variable
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a211 1
            // we encourage the use of ${basedir} using extension:
d213 1
a213 1
            // <extend>${basedir}/../project.xml</extend>
@


1.101
log
@rename local variable to not hide outer one
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d201 1
a201 2
        BeanReader beanReader = getProjectBeanReader();
        Project project = (Project) beanReader.parse( projectDescriptor );
d225 1
a225 1
                parent = (Project) beanReader.parse( parentPom );
@


1.100
log
@Change POM interpolation from compiling as a script to evaluating as an expression.
This saves around 40M on bootstrapping.

Checkstyle fixes.
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d201 2
a202 2
        BeanReader projectBeanReader = getProjectBeanReader();
        Project project = (Project) projectBeanReader.parse( projectDescriptor );
d226 1
a226 1
                parent = (Project) projectBeanReader.parse( parentPom );
@


1.99
log
@Switch stable branch back to HEAD
@
text
@a67 2
import org.apache.commons.jelly.Script;
import org.apache.commons.jelly.XMLOutput;
d81 1
a84 1
import java.io.BufferedWriter;
a89 1
import java.io.OutputStreamWriter;
a90 1
import java.io.Writer;
d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d139 1
a139 1
     * Create a Project object given a name a file descriptor.
d151 7
d188 2
d219 1
d264 1
d280 1
d346 2
a347 16
        Script script = JellyUtils.compileScript( getProjectInputStream( project ),
                                                  context,
                                                  INTERNAL_ENCODING );

        // Now run the script against the fully populated context so all the
        // values are filled in correctly.
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Writer writer = new BufferedWriter( new OutputStreamWriter( baos, INTERNAL_ENCODING ) );
        XMLOutput output = XMLOutput.createXMLOutput( writer );
        script.run( context, output );
        writer.close();

        // Read in the the project.xml contents with the interpolated values and
        // put back the original context with all the values that have been populated
        // but change the project in the context to the newly interpolated version.
        project = (Project) getProjectBeanReader().parse( new StringReader( baos.toString() ) );
d355 35
d435 1
a435 1
        for ( Iterator i = parentBeanMap.keySet().iterator(); i.hasNext(); )
d461 1
a495 4
        else if ( o == null )
        {
            return true;
        }
d498 2
a499 1
            return false;
d696 1
a696 1
        for ( Iterator i = contributingRecessiveKeys.iterator(); i.hasNext(); )
d817 1
a817 1
            
d819 1
a819 1
            
d822 1
a822 1
            
d835 1
a835 1
            
d864 1
a864 1
        for ( Iterator i = map.keySet().iterator(); i.hasNext(); )
d891 1
d907 1
a907 1
            return loadProperties( new FileInputStream( file ) );
d912 1
d935 1
d949 1
d993 2
a994 1
         *
d1072 1
d1076 1
a1076 1
        if ( new File( dir ).isAbsolute() == false )
d1087 1
@


1.98
log
@Update copyright
@
text
@d59 29
a89 1
import java.io.FileReader;
d92 1
d94 1
a94 1
import java.io.StringWriter;
a106 7
import org.apache.commons.collections.CollectionUtils;
import org.apache.maven.project.Project;
import org.apache.maven.util.StringInputStream;
import org.apache.plexus.util.DirectoryScanner;
import org.apache.plexus.util.StringUtils;
import org.xmlpull.v1.XmlPullParserException;

d111 2
a112 2
 * NOTE:
 * I need to make this class not-visible from outside this package.
d114 1
a114 2
 * @@author <a href="mailto:jason@@zenplex.com">Jason van Zyl</a>
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d118 21
d142 8
a149 7
    /** Project marshaller. */
    private DefaultProjectMarshaller marshaller;

    /** Project unmarshaller. */
    private DefaultProjectUnmarshaller unmarshaller;

    public MavenUtils()
d152 1
a152 2
        marshaller = new DefaultProjectMarshaller();
        unmarshaller = new DefaultProjectUnmarshaller();
d155 1
a155 5
    // ----------------------------------------------------------------------
    // Protected methods to be used by the Maven facade.
    // ----------------------------------------------------------------------

    Project getProject( File project, Maven maven )
d158 1
a158 1
        return getProject( project, true, maven );
d161 30
a190 1
    Project getProject( File projectDescriptor, boolean useParentPom, Maven maven )
d193 2
d196 2
a197 12
        FileReader pfr = new FileReader( projectDescriptor );
        Project project = null;
        try
        {
            project = unmarshaller.parse( pfr );
        }
        catch (XmlPullParserException e)
        {
            System.err.println("Error reading file: " + projectDescriptor);
            throw e;
        }
        pfr.close();
d200 2
a201 13
        Map properties = createProjectProperties( projectDescriptor.getParentFile() );

        // We do not want to do POM interpolation in properties files but maven.final.name is
        // baked into the driver.properties file. So we'll leave its default value but we will
        // place the real value in here because we are not interpolating the POM into properties.
        String mavenFinalName = (String) properties.get( "maven.final.name" );

        if ( mavenFinalName.indexOf( "${" ) >= 0 )
        {
            project.getId();
            properties.put( "maven.final.name", project.getArtifactId() + "-" + project.getCurrentVersion() );
        }

d207 8
a214 1
            pomToExtend = StringUtils.interpolate( pomToExtend, properties );
d220 1
a220 3
                FileReader fr = new FileReader( parentPom );
                parent = unmarshaller.parse( fr );
                fr.close();
d226 1
d228 2
a229 2
                project.setParent( parent );
            }
d231 3
a233 1
            project = setupInheritance( project, parent );
d236 4
a239 6
        // We need to do the interpolation after the merging so that ${basedir} is
        // expanded correctly.
        project = interpolateProject( project, properties );

        // Set the standard properties.
        project.setProjectProperties( properties );
d241 2
a242 2
        // Set a reference to the maven session.
        project.setMaven( maven );
a252 112
    private Project setupInheritance( Project child, Project parent )
    {
        // Id
        if ( child.getId() == null )
        {
            child.setId( parent.getId() );
        }

        // Group id
        if ( child.getGroupId() == null )
        {
            child.setGroupId( parent.getGroupId() );
        }

        // Short description
        if ( child.getShortDescription() == null )
        {
            child.setShortDescription( parent.getShortDescription() );
        }

        // Organization
        if ( child.getOrganization() == null )
        {
            child.setOrganization( parent.getOrganization() );
        }

        // Build
        if ( child.getBuild() == null )
        {
            child.setBuild( parent.getBuild() );
        }

        // Dependencies :: aggregate
        child.addParentDependencies( parent.getDependencies() );

        return child;
    }

    /**
     * Create a jelly context given a descriptor directory and parent
     * jelly context.
     *
     * @@param descriptorDirectory The directory from which to pull the standard maven
     * properties files from.
     * @@return The generated maven based on the contents of the standard maven
     * properties files.
     */
    Map createProjectProperties( File descriptorDirectory )
    {
        // System properties
        Properties systemProperties = System.getProperties();

        // User build properties
        File userBuildPropertiesFile =
            new File( System.getProperty( "user.home" ), "build.properties" );

        Properties userBuildProperties = loadProperties( userBuildPropertiesFile );

        // project build properties
        File projectBuildPropertiesFile =
            new File( descriptorDirectory, "build.properties" );

        Properties projectBuildProperties = loadProperties( projectBuildPropertiesFile );

        // project properties
        File projectPropertiesFile =
            new File( descriptorDirectory, "project.properties" );

        Properties projectProperties = loadProperties( projectPropertiesFile );

        Properties driverProperties = loadProperties(
            MavenUtils.class.getClassLoader().getResourceAsStream(
                MavenConstants.DRIVER_PROPERTIES ) );

        Properties defaultProperties = loadProperties(
            MavenUtils.class.getClassLoader().getResourceAsStream(
                MavenConstants.DEFAULTS_PROPERTIES ) );

        Map result = MavenUtils.mergeMaps( new Map[]
        {
            systemProperties,
            userBuildProperties,
            projectBuildProperties,
            projectProperties,
            defaultProperties,
            driverProperties
        } );

        // project build properties
        File pluginPropertiesFile =
            new File( descriptorDirectory, "plugin.properties" );

        Properties pluginProperties = loadProperties( pluginPropertiesFile );

        if ( pluginProperties != null )
        {
            result = mergeMaps( result, pluginProperties );
        }

        // Set the basedir value in the context.
        result.put( "basedir", descriptorDirectory.getPath() );

        for ( Iterator i = result.keySet().iterator(); i.hasNext(); )
        {
            String key = (String) i.next();
            String value = (String) result.get( key );
            result.put( key, StringUtils.interpolate( value, result ) );
        }

        return result;
    }

d261 1
a261 1
    List getProjects( File directory, String includes, Maven maven )
d264 1
a264 1
        return getProjects( directory, includes, null, maven );
d276 4
a279 4
    List getProjects( File directory,
                      String includes,
                      String excludes,
                      Maven maven )
d288 1
a288 1
            Project p = getProject( new File( files[i] ), maven );
d296 65
d365 1
a365 1
    public InputStream getProjectInputStream( Project project )
d378 1
a378 1
    public String getProjectString( Project project )
d381 93
a473 3
        StringWriter writer = new StringWriter();
        marshaller.marshall( writer, project );
        return writer.toString();
d483 1
a483 1
    public String[] getFiles( File directory, String includes )
d496 1
a496 1
    public String[] getFiles( File directory, String includes, String excludes )
a524 3
    // ----------------------------------------------------------------------
    // private
    // ----------------------------------------------------------------------
d526 10
a535 1
    private Project interpolateProject( Project p, Map map )
d538 60
a597 2
        return unmarshaller.parse(
            new StringReader( StringUtils.interpolate( getProjectString( p ), map ) ) );
d600 15
a614 3
    // ----------------------------------------------------------------------
    // Static methods that can probably be moved to a real util class.
    // ----------------------------------------------------------------------
d711 157
d875 1
a875 1
    public static Properties loadProperties( File file )
d895 1
a895 1
    public static Properties loadProperties( InputStream is )
d925 49
d1033 39
@


1.97
log
@Add debug messages with silly project.xml files
@
text
@d6 1
a6 1
 * Copyright (c) 2002 The Apache Software Foundation.  All rights
d93 1
a93 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.96
log
@Reorg improts
@
text
@d83 1
d93 1
a93 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d128 10
a137 1
        Project project = unmarshaller.parse( pfr );
@


1.95
log
@o RC1 Refactoring
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@a58 6
import org.apache.commons.collections.CollectionUtils;
import org.apache.maven.project.Project;
import org.apache.maven.util.StringInputStream;
import org.apache.plexus.util.DirectoryScanner;
import org.apache.plexus.util.StringUtils;

a65 2
import java.io.Writer;
import java.io.OutputStreamWriter;
d78 6
d92 1
a92 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d135 1
a135 1
        // place the real value in here because we are not interpolatin the POM into roperties.
@


1.94
log
@o MAVEN-294

  Applying John Casey's patches for dealing with property values that are
  present in driver.properties that need to be overriden.
@
text
@a58 6
import com.werken.forehead.ForeheadClassLoader;
import org.apache.commons.betwixt.XMLIntrospector;
import org.apache.commons.betwixt.io.BeanReader;
import org.apache.commons.betwixt.io.BeanWriter;
import org.apache.commons.betwixt.strategy.DecapitalizeNameMapper;
import org.apache.commons.collections.BeanMap;
a59 15
import org.apache.commons.digester.ExtendedBaseRules;
import org.apache.commons.digester.Rule;
import org.apache.commons.jelly.JellyContext;
import org.apache.commons.jelly.Script;
import org.apache.commons.jelly.XMLOutput;
import org.apache.commons.jelly.expression.CompositeExpression;
import org.apache.commons.jelly.expression.Expression;
import org.apache.commons.jelly.expression.jexl.JexlExpressionFactory;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.jelly.JellyUtils;
import org.apache.maven.jelly.MavenExpressionFactory;
import org.apache.maven.jelly.MavenJellyContext;
import org.apache.maven.project.BaseObject;
a60 1
import org.apache.maven.repository.Artifact;
d62 2
a63 2
import org.apache.tools.ant.DirectoryScanner;
import org.xml.sax.XMLReader;
a64 3
import javax.xml.parsers.SAXParserFactory;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
d67 1
a69 1
import java.io.OutputStreamWriter;
d71 1
d73 1
d90 3
d94 1
a94 3
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
 *
 * @@todo Remove all the context creation code and make a ContextBuilder class.
d98 2
a99 2
    /** Log. */
    private static final Log logger = LogFactory.getLog( MavenUtils.class );
d101 2
a102 2
    /** Internal encoding used for Jelly interpolation. */
    private static final String INTERNAL_ENCODING = "ISO-8859-1";
d104 2
a105 2
    /** we want to parse something */
    private static final ThreadLocal xmlReaderPool = new ThreadLocal();
d107 1
a107 23
    /** Should we cache and reuse the introspector */
    private static boolean cacheIntrospector = true;

    /** The singleton introspector if caching is enabled */
    private static XMLIntrospector singletonIntrospector;

    /** Project Bean Reader */
    private static BeanReader projectBeanReader;

    /** Maven Expression Factory. */
    private static MavenExpressionFactory mavenExpressionFactory = new MavenExpressionFactory();

    /** Map of loaded POMs. */
    private static HashMap parentPoms = new HashMap();

    /**
     * Create a Project object given a name a file descriptor.
     *
     * @@param projectDescriptor a maven project.xml
     * @@return the MavenSession project object for the given project descriptor
     * @@throws Exception when any errors occur
     */
    public static Project getProject( File projectDescriptor )
d110 2
a111 1
        return getProject( projectDescriptor, null );
d114 5
a118 1
    public static Project getProject( File projectDescriptor, MavenJellyContext parentContext )
d121 1
a121 1
        return getProject( projectDescriptor, parentContext, true );
d124 1
a124 30
    /**
     * Create a Project object given a file descriptor and optionally a parent Jelly
     * context. We are doing several things when creating a POM object, the phases
     * are outlined here:
     *
     * 1) The project.xml file is read in using betwixt which creates for us a
     *    Project object that, at this point, has not been run through Jelly i.e.
     *    no interpolation has occured yet.
     *
     * 2) The context for the project is created and set. So each project manages its
     *    own context. See the createContext() method for the details context creation
     *    process.
     *
     * 3) We check to see if the <extend> tag is being employed. If so, the parent
     *    project.xml file is read in. At this point we have a child and parent POM
     *    and the values are merged where the child's values override those of the
     *    parent.
     *
     * 4) The POM we have at this point is then processed through Jelly.
     *
     * 5) The project is handed the reference to the File that was used to create
     *    the project itself.
     *
     * @@param projectDescriptor a maven project.xml {@@link File}
     * @@return the MavenSession project object for the given project descriptor
     * @@throws Exception when any errors occur
     */
    public static Project getProject( File projectDescriptor,
                                      MavenJellyContext parentContext,
                                      boolean useParentPom )
a126 2
        //if ( pom.get())

d128 3
a130 2
        BeanReader projectBeanReader = getProjectBeanReader();
        Project project = (Project) projectBeanReader.parse( projectDescriptor );
d133 13
a145 2
        MavenJellyContext context = MavenUtils.createContext( projectDescriptor.getParentFile(),
                                                              parentContext );
d151 1
a151 7
            // We must look in the <extend/> element for expressions that may be present as
            // we encourage the use of ${basedir} using extension:
            //
            // <extend>${basedir}/../project.xml</extend>
            Expression e = JellyUtils.decomposeExpression( pomToExtend, mavenExpressionFactory, context );
            pomToExtend = e.evaluateAsString( context );

d157 3
a159 1
                parent = (Project) projectBeanReader.parse( parentPom );
d165 2
d169 2
a170 2
            // This is very slow. A BCEL solution would be very nice here.
            project = (Project) mergeBeans( project, parent );
d172 3
a174 4
            // Now let's do some magic with dependencies. We take all
            // the parent's dependencies and put them in with the childs.
            project.addParentDependencies( parent.getDependencies() );
        }
d176 2
a177 4
        // Set the created context, and put the project itself in the context. This
        // is how we get the ${pom} reference in the project.xml file to work.
        project.setContext( context );
        context.setProject( project );
d179 2
a180 2
        // 4)
        project = getJellyProject( project );
d188 94
a281 2
        // This may definitely break plugins.
        ClassLoader cl = project.getContext().getClassLoader();
d283 3
a285 1
        if ( cl instanceof ForeheadClassLoader )
d287 1
a287 5
            for ( Iterator i = project.getArtifacts().iterator(); i.hasNext(); )
            {
                Artifact artifact = (Artifact) i.next();
                ( (ForeheadClassLoader) cl ).addURL( artifact.getFile().toURL() );
            }
d290 9
a298 3
        // Explicity set the classloader used to find resources. As we just
        // poked all the dependencies into the classloader.
        project.getContext().setClassLoader( cl );
d300 1
a300 1
        return project;
d311 1
a311 1
    public static List getProjects( File directory, String includes, MavenJellyContext context )
d314 1
a314 1
        return getProjects( directory, includes, null, context );
d326 4
a329 4
    public static List getProjects( File directory,
                                    String includes,
                                    String excludes,
                                    MavenJellyContext context )
d338 1
a338 1
            Project p = getProject( new File( files[i] ), context );
a345 65
     * Create a project bean reader. We use it more than once so we don't want
     * to create it more than once.
     *
     * @@return a {@@link BeanReader} capable of reading {@@link Project projects}
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    private static BeanReader getProjectBeanReader()
        throws Exception
    {
        if ( projectBeanReader == null )
        {
            projectBeanReader = createBeanReader( Project.class );
        }

        return projectBeanReader;
    }

    /**
     * Take the POM and interpolate the value of the project's context to create
     * a new version of the POM with expanded context values.
     *
     * @@param project the maven POM
     * @@return Jelly interpolated project.
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    private static Project getJellyProject( Project project )
        throws Exception
    {
        // Save the original context because we null it temporarly
        // while we funnel it through betwixt.
        MavenJellyContext originalContext = project.getContext();

        // We don't want any taglib references in the context or Jelly
        // gets confused. All we want are the variables for interpolation. We
        // can change this but I think we would like to avoid general Jelly
        // idiom in the POM anyway.
        JellyContext context = new JellyContext();
        context.setVariables( originalContext.getVariables() );

        // We don't want the context being written out into the XML which
        // is the interpolated POM.
        project.setContext( null );
        Script script = JellyUtils.compileScript( getProjectInputStream( project ),
                                                  context,
                                                  INTERNAL_ENCODING );

        // Now run the script against the fully populated context so all the
        // values are filled in correctly.
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Writer writer = new BufferedWriter( new OutputStreamWriter( baos, INTERNAL_ENCODING ) );
        XMLOutput output = XMLOutput.createXMLOutput( writer );
        script.run( context, output );
        writer.close();

        // Read in the the project.xml contents with the interpolated values and
        // put back the original context with all the values that have been populated
        // but change the project in the context to the newly interpolated version.
        project = (Project) getProjectBeanReader().parse( new StringReader( baos.toString() ) );
        project.setContext( originalContext );
        project.getContext().setProject( project );

        return project;
    }

    /**
d350 1
a350 1
    public static InputStream getProjectInputStream( Project project )
d363 1
a363 1
    public static String getProjectString( Project project )
d366 3
a368 93
        ByteArrayOutputStream projectStream = new ByteArrayOutputStream();
        BeanWriter beanWriter = new BeanWriter( projectStream );
        beanWriter.setXMLIntrospector( createXMLIntrospector() );

        beanWriter.setWriteIDs( true );
        beanWriter.write( project );

        // We do not care what the original encoding was originally. This
        // is all completely internal. Our StringInputStream requires
        // everything to be encoded in "ISO-8859-1".
        return projectStream.toString( INTERNAL_ENCODING );
    }

    /**
     * Merge a child and parent Project object.
     *
     * @@param child child object
     * @@param parent the maven project
     * @@return the child after properties from the parent are merged
     */
    private static Object mergeBeans( Object child, Object parent )
    {
        BeanMap parentBeanMap = new BeanMap( parent );
        BeanMap childBeanMap = new BeanMap( child );

        for ( Iterator i = parentBeanMap.keySet().iterator(); i.hasNext(); )
        {
            // Take the property for the parent and insert it
            // into the child bean map.
            String property = (String) i.next();

            try
            {
                // If the childs property is null then take it from
                // the parent.
                Object c = childBeanMap.get( property );
                Object p = parentBeanMap.get( property );

                if ( valueNeedsPopulating( c ) )
                {
                    childBeanMap.put( property, p );
                }
                else if ( c != null && p != null && !valuePrimitive( c ) )
                {
                    Object mergedBean = mergeBeans( c, p );
                    childBeanMap.put( property, mergedBean );
                }
            }
            catch ( IllegalArgumentException e )
            {
                // There is no write method for this property.
            }
        }
        return child;
    }

    /**
     * Test if a value is a primitive or not
     *
     * @@param o the value to test
     * @@return true if o is a Boolean, String, Class or Integer.
     */
    private static boolean valuePrimitive( Object o )
    {
        if ( o instanceof Boolean || o instanceof String
            || o instanceof Class || o instanceof Integer )
        {
            return true;
        }
        return false;
    }

    /**
     * Check a child value to see if it needs populating with the parent value.
     * The constructor sets List values to [] so we have to check those.
     *
     * @@param o a child value
     * @@return true if the child value is an empty collection or null
     */
    private static boolean valueNeedsPopulating( Object o )
    {
        if ( o instanceof Collection && ( (Collection) o ).size() == 0 )
        {
            return true;
        }
        else if ( o == null )
        {
            return true;
        }
        else
        {
            return false;
        }
d378 1
a378 1
    public static String[] getFiles( File directory, String includes )
d391 1
a391 1
    public static String[] getFiles( File directory, String includes, String excludes )
d420 3
d424 1
a424 10
    /**
     * Creates a new instance of BeanReader
     *
     * @@param clazz the class to register with the reader
     * @@return a {@@link BeanReader bean reader}
     * @@throws Exception when an error occurs trying to determine
     *      properties of the class provided
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static BeanReader createBeanReader( Class clazz )
d427 2
a428 26
        BeanReader beanReader = new BeanReader( getXMLReader() );
        beanReader.setRules( new ExtendedBaseRules() );
        beanReader.addRule( "*/properties/?", new MetaPropertiesRule() );

        beanReader.setXMLIntrospector( getXMLIntrospector() );
        beanReader.registerBeanClass( clazz );

        return beanReader;
    }

    /**
     * If caching is enabled then this method will return a pooled introspector
     *
     * @@return XMLIntrospector used for processing the MavenSession xml-based POM.
     */
    public static XMLIntrospector getXMLIntrospector()
    {
        if ( cacheIntrospector )
        {
            if ( singletonIntrospector == null )
            {
                singletonIntrospector = createXMLIntrospector();
            }
            return singletonIntrospector;
        }
        return createXMLIntrospector();
d431 3
a433 49
    /**
     * Create the type of XMLIntrospector that is used to read all MavenSession style
     * XML files.
     *
     * @@return Betwixt XMLIntrospector
     */
    public static XMLIntrospector createXMLIntrospector()
    {
        XMLIntrospector introspector = new XMLIntrospector();

        introspector.setAttributesForPrimitives( false );
        introspector.setElementNameMapper( new DecapitalizeNameMapper() );

        return introspector;
    }

    /**
     * Get the XMLReader to use for processing XML related resources.
     *
     * @@return an XMLReader which is pooled per thread
     * @@throws Exception If an error occurs while creating the XMLReader.
     */
    public static XMLReader getXMLReader()
        throws Exception
    {
        XMLReader parser = (XMLReader) xmlReaderPool.get();
        if ( parser == null )
        {
            parser = createXMLReader();
            xmlReaderPool.set( parser );
        }
        return parser;
    }

    /**
     * Creates a new XMLReader instance
     *
     * @@return XMLReader used for parsing XML related maven resource.
     * @@throws Exception If an error occurs while creating the reader.
     */
    private static XMLReader createXMLReader()
        throws Exception
    {
        SAXParserFactory factory = SAXParserFactory.newInstance();

        factory.setNamespaceAware( true );

        return factory.newSAXParser().getXMLReader();
    }
a529 157
    /**
     * Create a jelly context given a descriptor directory.
     *
     * @@param descriptorDirectory The directory from which to pull the standard maven
     * properties files from.
     * @@return The generated maven based on the contents of the standard maven
     * properties files.
     */
    public static MavenJellyContext createContext( File descriptorDirectory )
    {
        return createContext( descriptorDirectory, null );
    }

    /**
     * Create a jelly context given a descriptor directory and parent
     * jelly context.
     *
     * @@param descriptorDirectory The directory from which to pull the standard maven
     * properties files from.
     * @@param parentContext The parent jelly context.
     * @@return The generated maven based on the contents of the standard maven
     * properties files.
     */
    public static MavenJellyContext createContext( File descriptorDirectory,
                                                   MavenJellyContext parentContext )
    {
        // System properties
        Properties systemProperties = System.getProperties();

        // User build properties
        File userBuildPropertiesFile =
            new File( System.getProperty( "user.home" ), "build.properties" );

        logger.debug( "Using userBuildPropertiesFile: " + userBuildPropertiesFile.getAbsolutePath() );
        Properties userBuildProperties = loadProperties( userBuildPropertiesFile );

        // project build properties
        File projectBuildPropertiesFile =
            new File( descriptorDirectory, "build.properties" );

        logger.debug( "Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath() );
        Properties projectBuildProperties = loadProperties( projectBuildPropertiesFile );

        // project properties
        File projectPropertiesFile =
            new File( descriptorDirectory, "project.properties" );

        logger.debug( "Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath() );
        Properties projectProperties = loadProperties( projectPropertiesFile );

        Properties driverProperties = loadProperties(
            MavenUtils.class.getClassLoader().getResourceAsStream(
                MavenConstants.DRIVER_PROPERTIES ) );

        Properties defaultProperties = loadProperties(
            MavenUtils.class.getClassLoader().getResourceAsStream(
                MavenConstants.DEFAULTS_PROPERTIES ) );

        Map result = MavenUtils.mergeMaps( new Map[]
        {
            systemProperties,
            userBuildProperties,
            projectBuildProperties,
            projectProperties,
            driverProperties
        } );

        MavenJellyContext context;

        // If we have a parent we eventually want what values it can provide but
        // we turn inheritance off momentarily until we finish integrating the
        // child's context values into the jelly context because we want the
        // child values to win and only use the parent in the event the
        // child cannot provide the value.

        if ( parentContext != null )
        {
            context = new MavenJellyContext( parentContext );
            context.setInherit( false );
            
            MavenUtils.integrateMapInContext( result, context );
            
            // Turn inheritance back on to make the parent's values visible.
            context.setInherit( true );
            
            //add in the driver.properties with defaults, but in inheritance mode.
            MavenUtils.integrateMapInContext( defaultProperties, context );
        }
        else
        {
            context = new MavenJellyContext();

            //integrate everything else...
        MavenUtils.integrateMapInContext( result, context );

            //integrate defaults...
            MavenUtils.integrateMapInContext( defaultProperties, context );
            
        // Turn inheritance back on to make the parent's values visible.
        context.setInherit( true );
        }


        // Set the basedir value in the context.
        context.setVariable( "basedir", descriptorDirectory.getPath() );

        return context;
    }

    /**
     * Integrate a Map of key:value pairs into a <code>MavenJellyContext</code>.
     * The values in the Map may be <code>CompositeExpression</code>s that need
     * to be evaluated before being placed into the context.
     *
     * @@param map Map to integrate into the provided jelly context.
     * @@param context Jelly context to integrate the map into.
     */
    public static void integrateMapInContext( Map map, MavenJellyContext context )
    {
        if ( map == null )
        {
            return;
        }

        JexlExpressionFactory factory = new JexlExpressionFactory();

        for ( Iterator i = map.keySet().iterator(); i.hasNext(); )
        {
            String key = (String) i.next();
            Object value;

            if ( context.getVariable( key ) == null )
            {
                String literalValue = (String) map.get( key );

                try
                {
                    Expression expr = CompositeExpression.parse( literalValue, factory );

                    if ( expr != null )
                    {
                        value = expr;
                    }
                    else
                    {
                        value = literalValue;
                    }

                    context.setVariable( key, value );
                }
                catch ( Exception e )
                {
                    // do nothing.
                }
            }
        }
    }
d537 1
a537 1
    private static Properties loadProperties( File file )
d557 1
a557 1
    private static Properties loadProperties( InputStream is )
a584 47
    }

    // ------------------------------------------------------------
    // M E T A  P R O P E R T I E S  R U L E  C L A S S
    // ------------------------------------------------------------

    /**
     * A simple digester rule for populating an object in the POM
     * with meta properties.
     */
    static class MetaPropertiesRule
        extends Rule
    {
        /** The body of the found property. */
        private String value;

        /**
         * Constructor for the InfoRule object
         */
        public MetaPropertiesRule()
        {
        }

        /**
         * Process the body of this element.
         *
         * @@param value body
         * @@throws Exception when any errors occur
         */
        public void body(String namespace, String name, String text)
            throws Exception
        {
            this.value = text;
        }

        /**
         * Finish off this element.
         *
         * @@throws Exception when any errors occur
         */
        public void end(String namespace, String elementName)
            throws Exception
        {
            BaseObject baseObject = (BaseObject) getDigester().peek();
            String name = getDigester().getCurrentElementName();
            baseObject.addProperty( name + ":" + value );
        }
@


1.94.2.1
log
@Update from back ported fixes
@
text
@d6 1
a6 1
 * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.94.2.2
log
@Start of MAVEN-536
@
text
@d59 1
d82 1
d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d250 16
@


1.94.2.3
log
@Fix typo
@
text
@d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d146 1
a146 1
     * @@return the Maven project object for the given project descriptor
@


1.94.2.4
log
@PR: MAVEN-522
clarification of POM elements that use paths.
@
text
@d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a212 1
            pomToExtend = MavenUtils.makeAbsolutePath( projectDescriptor.getParentFile(), pomToExtend );
d571 1
a571 1
    private static XMLIntrospector createXMLIntrospector()
d948 1
a948 3
         * @@param namespace the namespace
         * @@param name the tag name
         * @@param text the body text
a1029 39
    }

    /**
     * Resolve directory against a base directory if it is not already absolute.
     * @@param basedir the base directory for relative paths
     * @@param dir the directory to resolve
     * @@throws IOException if canonical path fails
     */
    public static String makeAbsolutePath( File basedir, String dir ) throws IOException
    {
        if ( new File( dir ).isAbsolute() == false )
        {
            return new File( basedir, dir ).getCanonicalPath();
        }
        return dir;
    }

    /**
     * Convert an absolute path to a relative path if it is under a given base directory.
     * @@param basedir the base directory for relative paths
     * @@param path the directory to resolve
     * @@throws IOException if canonical path fails
     */
    public static String makeRelativePath( File basedir, String path ) throws IOException
    {
        String canonicalBasedir = basedir.getCanonicalPath();
        String canonicalPath = new File( path ).getCanonicalPath();
        if ( canonicalPath.startsWith( canonicalBasedir ) )
        {
            if ( canonicalPath.charAt( canonicalBasedir.length() ) == File.separatorChar )
            {
                canonicalPath = canonicalPath.substring( canonicalBasedir.length() + 1 );
            }
            else
            {
                canonicalPath = canonicalPath.substring( canonicalBasedir.length() );
            }
        }
        return canonicalPath;
@


1.93
log
@Apache MavenSession -> Apache Maven
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d782 4
d807 8
a818 1
        }
d820 1
d823 3
d828 2
@


1.92
log
@Fix encoding problem. Use of non-English characters in project descriptor was impossible because POM interpolation lost encoding.
@
text
@d29 1
a29 1
 *    "Apache MavenSession" must not be used to endorse or promote products
d34 1
a34 1
 *    "Apache MavenSession", nor may "Apache" appear in their name, without
d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.91
log
@Remove deprecated digester and betwixt methods
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d362 1
a362 1
        Writer writer = new BufferedWriter( new OutputStreamWriter( baos ) );
@


1.90
log
@o Correct author - add mailto:
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a593 1
        introspector.setCachingEnabled( true );
d952 1
a952 1
        public void body( String value )
d955 1
a955 1
            this.value = value;
d963 1
a963 1
        public void end()
@


1.89
log
@Remove unused code
@
text
@d113 2
a114 3
 * @@author <a href="jason@@zenplex.com">Jason van Zyl</a>
 *
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.88
log
@o Removed the 'file' @@param from HttpUtils. The only thing is was being used
  for was to display error messages. We were also passing in the actual
  destinationFile so we can simply getName() to display error messages.
@
text
@d115 1
a115 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a142 1
    private static HashMap poms = new HashMap();
@


1.87
log
@o The child will now inherit a parent's dependencies.
o Quick check for ForeheadClassLoader as test don't like it. This will be moved when classworlds goes in.
@
text
@d115 1
a115 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d403 1
@


1.86
log
@o Adding some caching of parent POMs
o Preparing for classworlds.
@
text
@d115 1
a115 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d146 1
a146 1
   /**
d215 1
a215 1
            Expression e = JellyUtils.decomposeExpression( pomToExtend , mavenExpressionFactory, context);
d218 1
a218 1
            File parentPom = new File ( pomToExtend );
d233 4
d254 1
a254 1
        ForeheadClassLoader cl = (ForeheadClassLoader) project.getContext().getClassLoader();
d256 1
a256 1
        for ( Iterator i = project.getArtifacts().iterator(); i.hasNext();)
d258 5
a262 2
            Artifact artifact = (Artifact) i.next();
            cl.addURL( artifact.getFile().toURL() );
d356 1
a356 1
        project.setContext( null) ;
d730 1
a730 1
   /**
d989 1
a989 1
        catch( MissingResourceException e )
d1009 1
a1009 1
   /**
@


1.85
log
@o removing unused constant
o allow POMs to be read in while optionally ignoring the parent POM.
@
text
@d59 1
a59 23
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;

import javax.xml.parsers.SAXParserFactory;

d78 1
a79 1
import org.apache.maven.jelly.MavenExpressionFactory;
d82 1
d87 22
d115 1
a115 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d142 4
d192 3
a194 1
    public static Project getProject( File projectDescriptor, MavenJellyContext parentContext, boolean useParentPom )
d197 2
d217 15
a231 1
            Project parent = (Project) projectBeanReader.parse( new File( pomToExtend ) );
d248 13
@


1.84
log
@o Changing the place of the previous 2) and 3) to allow for interpolation
  in the <extend> element. And this was done so that we can start encouraging
  the use of ${basedir} when extending POMs in the file system. This is what
  will be documented in the examples.
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d154 6
d187 1
a187 1
    public static Project getProject( File projectDescriptor, MavenJellyContext parentContext )
d200 1
a200 1
        if ( pomToExtend != null )
a207 1

@


1.83
log
@Reorder imports
@
text
@d101 1
d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d138 3
d163 5
a167 1
     * 2) We check to see if the <extend> tag is being employed. If so, the parent
a171 5
     *
     * 3) The context for the project is created and set. So each project manages its
     *    own context. See the createContext() method for the details context creation
     *    process.
     *
d189 3
d193 1
d196 7
a205 4

        // 3)
        MavenJellyContext context = MavenUtils.createContext( projectDescriptor.getParentFile(),
                                                              parentContext );
@


1.82
log
@Cleanup
@
text
@d59 23
d86 1
a87 1
import org.apache.commons.collections.BeanMap;
a106 22
import javax.xml.parsers.SAXParserFactory;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import java.util.Locale;

d113 1
a113 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.81
log
@o cleaned up and tried to fully explain two of the most obscure operations in maven:
  the creation of project object and the use of jelly to do interpolation.
@
text
@a79 1
import org.apache.maven.project.Resource;
d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.80
log
@refactoring
@
text
@d80 1
d113 1
a113 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d151 22
a172 1
     * Create a Project object given a file descriptor.
d181 1
d185 1
d193 1
a193 3
        project = getJellyProject( project );
        project.setFile( projectDescriptor );

d197 3
d201 6
a206 1
        project.setContext( context );
d215 42
d275 2
a276 1
     * Process the project descriptor using Jelly itself.
d285 8
d294 1
d296 3
a298 2
        context.setVariable( MavenConstants.MAVEN_POM, project );

d303 2
d311 6
a316 1
        BeanReader projectBeanReader = getProjectBeanReader();
d318 1
a318 2
        return (Project) projectBeanReader.parse(
            new StringReader( baos.toString() ) );
a350 1

a484 40
    /**
     * This is currently used for the reactor but may be generally useful.
     *
     * @@param directory the directory to scan for maven projects
     * @@param includes the pattern that matches a project
     * @@return a {link List} of {@@link Project}s
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static List getProjects( File directory, String includes, MavenJellyContext context )
        throws Exception
    {
        return getProjects( directory, includes, null, context );
    }

    /**
     * This is currently used for the reactor but may be generally useful.
     *
     * @@param directory the directory to scan for maven projects
     * @@param includes Patterns to include.
     * @@param excludes Patterns to exclude.
     * @@return a {link List} of {@@link Project}s
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static List getProjects( File directory,
                                    String includes,
                                    String excludes,
                                    MavenJellyContext context )
        throws Exception
    {
        String[] files = getFiles( directory, includes, excludes );

        List projects = new ArrayList();

        for ( int i = 0; i < files.length; i++ )
        {
            projects.add( getProject( new File( files[i] ), context ) );
        }

        return projects;
    }
d755 1
a755 1
        // Turn inheritance back on to make the parent's values visible;
d757 3
@


1.79
log
@Used IDEAJ's optimize imports thingy to clean up the import statements - this time only with single-type-imports
@
text
@d29 1
a29 1
 *    "Apache Maven" must not be used to endorse or promote products
d34 1
a34 1
 *    "Apache Maven", nor may "Apache" appear in their name, without
d63 1
a64 1
import org.apache.commons.collections.CollectionUtils;
a98 1
import java.util.Locale;
a99 1
import java.util.MissingResourceException;
d101 1
d103 2
a104 1
import java.util.Set;
d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d136 1
a136 1
    /**
d140 1
a140 1
     * @@return the Maven project object for the given project descriptor
d146 1
a146 1
        return getProject( projectDescriptor, new File( "." ) );
d153 1
a153 2
     * @@param dir the base directory to find related files
     * @@return the Maven project object for the given project descriptor
d156 1
a156 1
    public static Project getProject( File projectDescriptor, File dir )
d165 1
a165 3
            Project parent = (Project)
                projectBeanReader.parse( new File( dir, pomToExtend ) );

d172 9
d246 1
a246 1
     * @@param project Maven project to turn into an XML representation.
d405 1
a405 1
    public static List getProjects( File directory, String includes )
d408 1
a408 1
        return getProjects( directory, includes, null );
d420 4
a423 1
    public static List getProjects( File directory, String includes, String excludes )
d432 1
a432 2
            projects.add( getProject( new File( files[i] ),
                                      new File( files[i] ).getParentFile() ) );
d463 1
a463 1
     * @@return XMLIntrospector used for processing the Maven xml-based POM.
d479 1
a479 1
     * Create the type of XMLIntrospector that is used to read all Maven style
d490 1
a490 1
        introspector.setNameMapper( new DecapitalizeNameMapper() );
a673 1
        // driver properties
d689 6
d698 1
a698 1
            context.setInherit( true );
d707 3
d869 1
a869 1
     * Load Maven user messages from a resource bundle given the
@


1.78
log
@Used IDEAJ's optimize imports thingy to clean up the import statements
@
text
@d94 11
a104 1
import java.util.*;
d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.77
log
@o Adding excludes capabilities.
@
text
@d63 1
a64 1
import org.apache.commons.collections.BeanMap;
d94 1
a94 11
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import java.util.Locale;
d102 1
a102 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.76
log
@o Maven will now execute when a project.xml file is not present, or more
  accurately when the maven bean has not been handed a live project instance.
  We can now create plugins that generate various maven projects.

PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d345 2
a346 2
     * @@param directory Directory to scan
     * @@param includes Comma separated list of includes
d349 1
a349 1
    public static String[] getFiles( String directory, String includes )
d351 1
a351 1
        return getFiles( new File( directory ), includes );
d357 3
a359 2
     * @@param directory Directory to scan
     * @@param includes Comma separated list of includes
d362 1
a362 1
    public static String[] getFiles( File directory, String includes )
d369 7
d379 1
d402 16
a417 1
        String[] files = getFiles( directory, includes );
d851 1
a851 1
    
d859 1
a859 1
        try 
d863 2
a864 2
        } 
        catch( MissingResourceException e ) 
@


1.75
log
@o Patch for MAVEN-172.
@
text
@d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d831 1
@


1.74
log
@o Turning on the use of localized messages sets using resource bundles.
@
text
@d103 1
d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d827 5
a831 1

d834 6
a839 6
        // Look for the message bundle corresponding to the user's locale.
        messages = ResourceBundle.getBundle( "org/apache/maven/messages/messages" );

        // If we can't find the appropriate message bundle for the locale then
        // we will fall back to English.
        if ( messages == null )
d841 2
a845 1

a882 1

@


1.73
log
@o adding really simple localized messaging and just
defaulting to english right now.
@
text
@d102 2
d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d824 2
a825 1
    private static Properties messages;
d829 11
a839 3
        messages = loadProperties(
            MavenUtils.class.getClassLoader().getResourceAsStream(
                "org/apache/maven/messages/messages.en" ) );
d869 1
a869 1
            return messages.getProperty( messageId );
d873 1
a873 1
            return StringUtils.replace( messages.getProperty( messageId ),
@


1.72
log
@o adding todo
@
text
@d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d820 47
@


1.71
log
@Remove Piccolo specific code
@
text
@d109 3
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.70
log
@refactoring
@
text
@a58 1
import com.bluecast.xml.JAXPSAXParserFactory;
d485 1
a485 1
        SAXParserFactory factory = new JAXPSAXParserFactory();
@


1.69
log
@o more checkstyle fixes.
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d588 13
d602 2
a603 1
     * Process properties in dominant order.
d607 1
d611 2
a612 1
    public static MavenJellyContext createContext( File descriptorDirectory )
d652 12
a663 1
        MavenJellyContext context = new MavenJellyContext();
@


1.68
log
@Trying out IDEA cvs integration.
@
text
@d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d118 1
a118 1
    private final static String INTERNAL_ENCODING = "ISO-8859-1";
d121 1
a121 1
    private final static ThreadLocal xmlReaderPool = new ThreadLocal();
a195 1
     * @@param parentContext a context to resolve variables
d407 1
a407 1
     * @@throws IntrospectionException when an error occurs trying to determine
d426 2
d460 2
d463 1
d479 3
d508 3
a510 3
     * @@param dominantMap
     * @@param recessiveMap
     * @@return Map
d590 5
a597 2
        System.out.println( "descriptorDirectory: " + descriptorDirectory );

d647 2
a648 2
     * @@param map
     * @@param context
d693 3
d713 3
d758 1
@


1.67
log
@*** empty log message ***
@
text
@d109 2
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.66
log
@o fixing the imports again after setting up IDEA correctly. Unused imports
  should now be nuked.
@
text
@d65 1
d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.65
log
@o optimizing imports using my new IDEA toy :-)
@
text
@a90 1
import java.io.InputStreamReader;
a101 1
import java.util.StringTokenizer;
d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d118 1
a118 4
    /**
     * A thread pool to avoid the startup overhead of the XML parser each time
     * we want to parse something
     */
d138 1
a138 1
            throws Exception
d152 1
a152 1
            throws Exception
d161 1
a161 1
                    projectBeanReader.parse( new File( dir, pomToExtend ) );
d180 1
a180 1
            throws Exception
d199 1
a199 1
            throws Exception
d218 1
a218 1
                new StringReader( baos.toString() ) );
d227 1
a227 1
            throws Exception
d240 1
a240 1
            throws Exception
d307 1
a307 1
                || o instanceof Class || o instanceof Integer )
d386 1
a386 1
            throws Exception
d411 1
a411 1
            throws Exception
d460 1
a460 1
            throws Exception
d475 1
a475 1
            throws Exception
d530 2
a531 2
                CollectionUtils.subtract( recessiveMapKeys,
                                          CollectionUtils.intersection( dominantMapKeys, recessiveMapKeys ) );
d591 1
a591 1
                new File( System.getProperty( "user.home" ), "build.properties" );
d598 1
a598 1
                new File( descriptorDirectory, "build.properties" );
d605 1
a605 1
                new File( descriptorDirectory, "project.properties" );
d612 2
a613 2
                MavenUtils.class.getClassLoader().getResourceAsStream(
                        MavenConstants.DRIVER_PROPERTIES ) );
d738 1
a738 1
            extends Rule
d756 1
a756 1
                throws Exception
d767 1
a767 1
                throws Exception
@


1.64
log
@refactoring
@
text
@d58 1
d60 23
d84 1
d89 1
a91 1
import java.io.IOException;
a94 1

d97 1
a100 1
import java.util.HashMap;
a104 35
import javax.xml.parsers.SAXParserFactory;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.BeanMap;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.betwixt.io.BeanReader;
import org.apache.commons.betwixt.io.BeanWriter;
import org.apache.commons.betwixt.XMLIntrospector;
import org.apache.commons.betwixt.strategy.DecapitalizeNameMapper;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.maven.MavenConstants;
import org.apache.maven.project.BaseObject;
import org.apache.maven.project.Project;

import org.apache.tools.ant.DirectoryScanner;

import org.apache.maven.jelly.MavenJellyContext;
import org.apache.maven.jelly.JellyUtils;
import org.apache.maven.util.StringInputStream;

import org.xml.sax.XMLReader;

import org.apache.commons.digester.ExtendedBaseRules;
import org.apache.commons.digester.Rule;

import org.apache.commons.jelly.JellyContext;
import org.apache.commons.jelly.Script;
import org.apache.commons.jelly.XMLOutput;
import org.apache.commons.jelly.expression.CompositeExpression;
import org.apache.commons.jelly.expression.Expression;
import org.apache.commons.jelly.expression.jexl.JexlExpressionFactory;

d110 1
a110 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d115 2
a116 2
    private static final Log logger = LogFactory.getLog(MavenUtils.class);
    
d142 2
a143 2
    public static Project getProject(File projectDescriptor)
        throws Exception
d145 1
a145 1
        return getProject(projectDescriptor, new File("."));
d156 2
a157 2
    public static Project getProject(File projectDescriptor, File dir)
        throws Exception
d160 1
a160 1
        Project project = (Project) projectBeanReader.parse(projectDescriptor);
d163 1
a163 1
        if (pomToExtend != null)
d166 1
a166 1
                projectBeanReader.parse(new File(dir, pomToExtend));
d168 1
a168 1
            project = (Project) mergeBeans(project, parent);
d171 2
a172 2
        project = getJellyProject(project);
        project.setFile(projectDescriptor);
d185 1
a185 1
        throws Exception
d187 1
a187 1
        if (projectBeanReader == null)
d189 1
a189 1
            projectBeanReader = createBeanReader(Project.class);
d203 2
a204 2
    private static Project getJellyProject(Project project)
        throws Exception
d208 1
a208 1
        context.setVariable(MavenConstants.MAVEN_POM, project);
d210 3
a212 3
        Script script = JellyUtils.compileScript(getProjectInputStream(project),
            context,
            INTERNAL_ENCODING);
d215 3
a217 3
        Writer writer = new BufferedWriter(new OutputStreamWriter(baos));
        XMLOutput output = XMLOutput.createXMLOutput(writer);
        script.run(context, output);
d223 1
a223 1
            new StringReader(baos.toString()));
d231 2
a232 2
    public static InputStream getProjectInputStream(Project project)
        throws Exception
d234 1
a234 1
        return new StringInputStream(getProjectString(project));
d244 2
a245 2
    public static String getProjectString(Project project)
        throws Exception
d248 4
a251 4
        BeanWriter beanWriter = new BeanWriter(projectStream);
        beanWriter.setXMLIntrospector(createXMLIntrospector());
        beanWriter.setWriteIDs(true);
        beanWriter.write(project);
d257 1
a257 1
        return projectStream.toString(INTERNAL_ENCODING);
d267 1
a267 1
    private static Object mergeBeans(Object child, Object parent)
d269 2
a270 2
        BeanMap parentBeanMap = new BeanMap(parent);
        BeanMap childBeanMap = new BeanMap(child);
d272 1
a272 1
        for (Iterator i = parentBeanMap.keySet().iterator(); i.hasNext(); )
d282 2
a283 2
                Object c = childBeanMap.get(property);
                Object p = parentBeanMap.get(property);
d285 1
a285 1
                if (valueNeedsPopulating(c))
d287 1
a287 1
                    childBeanMap.put(property, p);
d289 1
a289 1
                else if (c != null && p != null && !valuePrimitive(c))
d291 2
a292 2
                    Object mergedBean = mergeBeans(c, p);
                    childBeanMap.put(property, mergedBean);
d295 1
a295 1
            catch (IllegalArgumentException e)
d309 1
a309 1
    private static boolean valuePrimitive(Object o)
d311 2
a312 2
        if (o instanceof Boolean || o instanceof String
            || o instanceof Class || o instanceof Integer)
d326 1
a326 1
    private static boolean valueNeedsPopulating(Object o)
d328 1
a328 1
        if (o instanceof Collection && ((Collection) o).size() == 0)
d332 1
a332 1
        else if (o == null)
d349 1
a349 1
    public static String[] getFiles(String directory, String includes)
d351 1
a351 1
        return getFiles(new File(directory), includes);
d361 1
a361 1
    public static String[] getFiles(File directory, String includes)
d364 1
a364 1
        if (includes != null)
d366 1
a366 1
            includePatterns = StringUtils.split(includes, ",");
d369 2
a370 2
        directoryScanner.setBasedir(directory);
        directoryScanner.setIncludes(includePatterns);
d374 1
a374 1
        for (int i = 0; i < files.length; i++)
d376 1
a376 1
            files[i] = new File(directory, files[i]).getAbsolutePath();
d390 2
a391 2
    public static List getProjects(File directory, String includes)
        throws Exception
d393 1
a393 1
        String[] files = getFiles(directory, includes);
d397 1
a397 1
        for (int i = 0; i < files.length; i++)
d399 1
a399 1
            projects.add( getProject( new File( files[i] ), 
d415 2
a416 2
    public static BeanReader createBeanReader(Class clazz)
        throws Exception
d418 3
a420 3
        BeanReader beanReader = new BeanReader(getXMLReader());
        beanReader.setRules(new ExtendedBaseRules());
        beanReader.addRule("*/properties/?", new MetaPropertiesRule());
d422 2
a423 2
        beanReader.setXMLIntrospector(getXMLIntrospector());
        beanReader.registerBeanClass(clazz);
d433 1
a433 1
        if (cacheIntrospector)
d435 1
a435 1
            if (singletonIntrospector == null)
d454 3
a456 3
        introspector.setAttributesForPrimitives(false);
        introspector.setCachingEnabled(true);
        introspector.setNameMapper(new DecapitalizeNameMapper());
d465 1
a465 1
        throws Exception
d468 1
a468 1
        if (parser == null)
d471 1
a471 1
            xmlReaderPool.set(parser);
d480 1
a480 1
        throws Exception
d484 1
a484 1
        factory.setNamespaceAware(true);
d493 1
a493 1
     * 
d496 1
a496 1
     * 
d508 1
a508 1
    public static Map mergeMaps(Map dominantMap, Map recessiveMap)
d511 2
a512 2
    
        if (dominantMap == null && recessiveMap == null)
d516 2
a517 2
        
        if (dominantMap != null && recessiveMap == null)
d520 3
a522 3
        }            
        
        if (dominantMap == null && recessiveMap != null)
d525 2
a526 2
        }            
    
d530 1
a530 1
        
d534 6
a539 6
        Collection contributingRecessiveKeys = 
            CollectionUtils.subtract(recessiveMapKeys, 
                CollectionUtils.intersection(dominantMapKeys, recessiveMapKeys));
        
        result.putAll(dominantMap);
        
d542 1
a542 1
        for (Iterator i = contributingRecessiveKeys.iterator(); i.hasNext();)
d545 1
a545 1
            result.put(key, recessiveMap.get(key));
d547 1
a547 1
        
d550 1
a550 1
    
d559 1
a559 1
    public static Map mergeMaps(Map[] maps)
d562 2
a563 2
        
        if (maps.length == 0)
d567 1
a567 1
        else if (maps.length == 1)
d573 3
a575 3
            result = mergeMaps(maps[0], maps[1]);
            
            for (int i = 2; i < maps.length; i++)
d577 1
a577 1
                result = mergeMaps(result, maps[i]);
d580 1
a580 1
        
d583 1
a583 1
    
d587 1
a587 1
    public static MavenJellyContext createContext(File descriptorDirectory)
d589 2
a590 2
        System.out.println("descriptorDirectory: " + descriptorDirectory);
        
d593 1
a593 1
        
d595 4
a598 4
        File userBuildPropertiesFile = 
            new File( System.getProperty("user.home"), "build.properties" );
        
        logger.debug("Using userBuildPropertiesFile: " + userBuildPropertiesFile.getAbsolutePath());
d600 1
a600 1
        
d602 4
a605 4
        File projectBuildPropertiesFile = 
            new File( descriptorDirectory, "build.properties" );
        
        logger.debug("Using projectBuildPropertiesFile: " + projectBuildPropertiesFile.getAbsolutePath());
d607 1
a607 1
        
d609 4
a612 4
        File projectPropertiesFile = 
            new File( descriptorDirectory, "project.properties" );
        
        logger.debug("Using projectPropertiesFile: " + projectPropertiesFile.getAbsolutePath());
d614 1
a614 1
        
d617 2
a618 2
            MavenUtils.class.getClassLoader().getResourceAsStream(
                MavenConstants.DRIVER_PROPERTIES));
d627 2
a628 2
        });
        
d630 2
a631 2
        MavenUtils.integrateMapInContext(result, context);
        
d643 1
a643 1
    public static void integrateMapInContext(Map map, MavenJellyContext context)
d645 1
a645 1
        if (map == null)
d652 1
a652 1
        for (Iterator i = map.keySet().iterator(); i.hasNext();)
d656 2
a657 2
            
            if (context.getVariable(key) == null)
d659 2
a660 2
                String literalValue = (String) map.get(key);
                
d663 1
a663 1
                    Expression expr = CompositeExpression.parse(literalValue, factory);
d665 1
a665 1
                    if (expr != null)
d674 1
a674 1
                    context.setVariable(key, value);
d676 1
a676 1
                catch (Exception e)
d687 1
a687 1
    private static Properties loadProperties(File file)
d691 1
a691 1
            return loadProperties(new FileInputStream(file));
d693 1
a693 1
        catch(Exception e)
d697 1
a697 1
        
d704 1
a704 1
    private static Properties loadProperties(InputStream is)
d709 1
a709 1
            properties.load(is);
d712 1
a712 1
        catch (IOException e)
d720 1
a720 1
                if (is != null)
d725 1
a725 1
            catch (IOException e)
d730 1
a730 1
        
d743 1
a743 1
         extends Rule
d750 2
a751 2
        public MetaPropertiesRule() 
        { 
d760 2
a761 2
        public void body(String value)
            throws Exception
d772 1
a772 1
            throws Exception
d776 1
a776 1
            baseObject.addProperty(name + ":" + value);
@


1.63
log
@o Adding new method to merge a Map with a MavenJellyContext.
@
text
@d66 1
d76 2
d91 2
d101 1
a102 1
import org.apache.maven.util.JellyUtils;
d121 1
a121 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d125 3
d410 2
a411 2
            projects.add(getProject(new File(files[i]),
                new File(files[i]).getParentFile()));
d521 17
d549 2
d556 1
a556 1
            dominantMap.put(key, recessiveMap.get(key));
d559 1
a559 1
        return dominantMap;
d596 51
d671 1
a671 1

d693 50
@


1.62
log
@o Moving all the constants to MavenConstants
o Adding CLI constants to App.java. Need to unify App.java and CLIManager.java
@
text
@d94 2
a98 4
import org.apache.commons.jelly.JellyContext;
import org.apache.commons.jelly.Script;
import org.apache.commons.jelly.XMLOutput;

d104 7
d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d566 49
@


1.61
log
@o Adding a javadoc blurb.
@
text
@d89 1
a89 1
import org.apache.maven.jelly.MavenJellyContext;
d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d206 1
a206 1
        context.setVariable(MavenJellyContext.MAVEN_POM, project);
@


1.60
log
@o Adding another Map merging method which takes an array of Maps.
o Put in the functionality to merge all the required properties
  from the CLI wrapper and create a context from the resultant
  values but not activated yet. More testing first.
@
text
@d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d529 9
a537 1

@


1.59
log
@o Breaking apart the app package and trying to put some of the classes
  into more appropriate places.
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d486 1
a486 1
    
d528 25
@


1.58
log
@o Merged MetaProperties into MavenUtils as an inner class.
o Added mergeMaps which will be used for properties inheritance.
o Remove context inheritance for the moment as I'm going to rework it.
@
text
@d89 1
a89 1
import org.apache.maven.app.MavenJellyContext;
d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.57
log
@o another constant
@
text
@a57 1

d74 2
d82 1
d90 1
d101 2
d104 1
a104 2

import org.xml.sax.XMLReader;
d107 2
a108 2
 * Utilities for reading maven project descriptors, profile descriptors
 * and workspace descriptors.
d111 1
a111 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d119 2
a120 2
     * A thread pool to avoid the startup overhead of the XML parser each
     * time we want to parse something
d122 1
a122 1
    private static final ThreadLocal xmlReaderPool = new ThreadLocal();
d143 1
a143 27
        return getProject(projectDescriptor, new File("."), null);
    }

    /**
     * @@return the POM from the given file in the current directory, using the
     * given context as the parent context
     * @@param projectDescriptor the file to read the POM from
     * @@param parentContext a context to resolve variables
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static Project getProject(File projectDescriptor,
        MavenJellyContext parentContext) throws Exception
    {
        return getProject(projectDescriptor, new File("."), parentContext);
    }

    /**
     * @@return the POM from the given file in the given directory, with no
     * parent context
     * @@param projectDescriptor the file to read the POM from
     * @@param dir the base directory to find related files
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static Project getProject(File projectDescriptor, File dir)
        throws Exception
    {
        return getProject(projectDescriptor, dir, null);
a150 1
     * @@param parentContext a context to resolve variables
d154 1
a154 3
    public static Project getProject(File projectDescriptor,
                                     File dir,
                                     MavenJellyContext parentContext)
d164 1
a164 1
                projectBeanReader.parse( new File(dir, pomToExtend ) );
d169 1
a169 1
        project = getJellyProject(project, parentContext);
d176 2
a177 2
     * Create a project bean reader. We use it more than once so we don't
     * want to create it more than once.
d201 1
a201 2
    private static Project getJellyProject(Project project,
                                           MavenJellyContext parentContext)
d204 1
a204 1
        JellyContext context = null;
a205 10
        if (parentContext != null)
        {
            context = new JellyContext(parentContext);
            context.setInherit(true);
        }
        else
        {
            context = new JellyContext();
        }
        
d209 2
a210 2
                                                 context,
                                                 INTERNAL_ENCODING);
d263 1
a263 1
     * @@return  the child after properties from the parent are merged
d270 1
a270 1
        for (Iterator i = parentBeanMap.keySet().iterator(); i.hasNext();)
d303 1
d318 2
a319 3
     * Check a child value to see if it needs populating with
     * the parent value. The constructor sets List values to []
     * so we have to check those.
d381 1
a381 2
     * This is currently used for the reactor but may be
     * generally useful.
a441 1

d443 2
a444 2
     * Create the type of XMLIntrospector that is used to read
     * all Maven style XML files.
d462 2
a463 1
    public static XMLReader getXMLReader() throws Exception
a473 1

d477 2
a478 1
    private static XMLReader createXMLReader() throws Exception
d482 1
a482 1
        factory.setNamespaceAware( true );
d485 89
@


1.56
log
@o Removing workspace and profile notions from Maven proper. We'll leave
  that to wrapping applications like Continuum and the like.
@
text
@d107 1
a107 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d120 1
a120 3
    /**
     * Should we cache and reuse the introspector
     */
d123 1
a123 3
    /**
     * The singleton introspector if caching is enabled
     */
a141 8
    /*

    project.xml [ISO-8859-1]
    |
    v

    */

a187 32
            if (pomToExtend.startsWith("template:"))
            {
                JellyContext context = null;

                if (parentContext != null)
                {
                    context = new JellyContext(parentContext);
                    context.setInherit(true);
                }
                else
                {
                    context = new JellyContext();
                }

                String mavenHome = (String) context.findVariable(parentContext.MAVEN_HOME);
                StringTokenizer st = new StringTokenizer(pomToExtend, ":");
                st.nextToken();
                pomToExtend = mavenHome + "/templates/" + st.nextToken() + "/project.xml";
            }

            // Project parent;
            // try
            // {
            //     parent = (Project) projectBeanReader.parse(
            //       new File(pomToExtend));
            // }
            // catch (Exception e)
            // {
            //     parent = (Project) projectBeanReader.parse(
            //       new File(dir, pomToExtend));
            // }

a291 18
    }

    /**
     * Merge a child and parent Project object.
     *
     * I would like to use BeanUtils but it doesn't quite work the
     * way I need. So I will patch it later.
     *
     * @@param child child object
     * @@param parent the maven project
     * @@return the child after project properties have been copied
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    private static Object mergeBeansX(Object child, Object parent)
        throws Exception
    {
        BeanUtils.copyProperties(child, parent);
        return child;
@


1.55
log
@o Cleanup, use constants. Preparing for another pass.
@
text
@a88 2
import org.apache.maven.project.Profile;
import org.apache.maven.project.Workspace;
d107 1
a107 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a435 95
    }

    /**
     * Create a Profile object given a file descriptor.
     *
     * @@param profileDescriptor A reactor profile
     * @@return the Maven profile object for the given profile descriptor
     * @@throws Exception when any errors occur
     */
    public static Profile getProfile(String profileDescriptor)
        throws Exception
    {
        return getProfile(new File(profileDescriptor));
    }

    /**
     * Create a Profile object given a file descriptor.
     *
     * @@param profileDescriptor a maven profile descriptor
     * @@return the Maven profile object for the given profile descriptor
     * @@throws Exception when any errors occur
     */
    public static Profile getProfile(File profileDescriptor)
        throws Exception
    {
        BeanReader reader = createBeanReader(Profile.class);
        Profile profile = (Profile) reader.parse(
            new FileInputStream(profileDescriptor));

        return profile;
    }

    /**
     * Create a Workspace object given a workspace and profile descriptor.
     *
     * @@param workspaceDescriptor the file name of a maven workspace descriptor
     * @@param profileDescriptor the file name of a maven project descriptor
     * @@param mavenLocalRepo a local maven repository
     * @@return a maven {@@link Workspace} specifed by the given descriptors
     * @@throws Exception when any error occurs
     */
    public static Workspace getWorkspace(String workspaceDescriptor,
                                         String profileDescriptor,
                                         String mavenLocalRepo)
        throws Exception
    {
        return getWorkspace(new File(workspaceDescriptor),
            new File(profileDescriptor),
            new File(mavenLocalRepo));
    }

    /**
     * Create a <code>{@@link Workspace}</code> object given a workspace
     * descriptor, a project descriptor and a local repository.
     *
     * @@param workspaceDescriptor the xml file describing the workspace
     * @@param profileDescriptor the xml file describing the projects to build
     * @@param mavenLocalRepo the local maven repository
     * @@return a {@@link Workspace} object ready for building
     * @@throws Exception when an error occurs
     */
    public static Workspace getWorkspace(File workspaceDescriptor,
                                         File profileDescriptor,
                                         File mavenLocalRepo)
        throws Exception
    {
        // Create our workspace.
        BeanReader workspaceReader = createBeanReader(Workspace.class);
        Workspace workspace = (Workspace) workspaceReader.parse(
            new FileInputStream(workspaceDescriptor));

        // Create our profile.
        Profile profile = getProfile(profileDescriptor);

        // Set the workspace profile.
        workspace.setProfile(profile);

        // Create our set of project.
        for (Iterator i = profile.getProjectIds().iterator(); i.hasNext();)
        {
            String projectId = (String) i.next();
            // This should take care of any trailing slashes, or the directory
            // formatted in any arbitrary fashion. I don't want to expect a
            // particular format because people do everything different.
            File baseDir = new File(new File(mavenLocalRepo, "project"),
                                    projectId);
            File projectDescriptor = new File(baseDir, "project.xml");

            // Map the project descriptors and add them to the profile.
            Project project = getProject(projectDescriptor);

            profile.addProject(project);
        }

        return workspace;
@


1.54
log
@Fix project extends not working.
@
text
@d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d287 2
a288 1
        context.setVariable("pom", project);
@


1.53
log
@Comment out and restore old code for changes which broke bootstrap.
Should work again now.
@
text
@d60 1
a60 1
 
d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d116 2
a117 2
    /**    
     * A thread pool to avoid the startup overhead of the XML parser each 
d124 2
a125 2
     */            
    private static boolean cacheIntrospector = true;            
d131 1
a131 1
                            
d149 1
a149 1
    
d153 1
a153 1
    
d163 1
a163 1
    public static Project getProject(File projectDescriptor, 
d168 1
a168 1
    
d191 1
a191 1
    public static Project getProject(File projectDescriptor, 
d193 1
a193 1
                                     MavenJellyContext parentContext) 
d205 1
a205 1
   
d233 4
a236 4
            
            Project parent = (Project) 
                projectBeanReader.parse( new File( pomToExtend ) );
            
d239 1
a239 1
                
d242 1
a242 1
        
d249 1
a249 1
     * 
d259 2
a260 2
        }            
        
d272 2
a273 2
    private static Project getJellyProject(Project project, 
                                           MavenJellyContext parentContext) 
d277 1
a277 1
        
d288 2
a289 2
        
        Script script = JellyUtils.compileScript(getProjectInputStream(project), 
d292 1
a292 1
        
d298 1
a298 1
        
d300 1
a300 1
    
d304 1
a304 1
    
d331 1
a331 1
        
d335 1
a335 1
        
d344 1
a344 1
     * 
d359 1
a359 1
     * 
d368 1
a368 1
        
d376 1
a376 1
            {   
d381 1
a381 1
                
d399 1
a399 1
    
d407 1
a407 1
        if (o instanceof Boolean || o instanceof String 
d414 1
a414 1
    
d419 1
a419 1
     * 
d436 1
a436 1
        }            
d465 1
a465 1
        
d507 1
a507 1
        
d510 1
a510 1
        
d513 1
a513 1
        
d521 1
a521 1
            File baseDir = new File(new File(mavenLocalRepo, "project"), 
d527 1
a527 1
            
d573 1
a573 1
    
d577 1
a577 1
     * 
d587 1
a587 1
        
d589 1
a589 1
        
d592 1
a592 1
            projects.add(getProject(new File(files[i]), 
d595 1
a595 1
        
d599 2
a600 2
    /** 
     * Creates a new instance of BeanReader 
d608 1
a608 1
    public static BeanReader createBeanReader(Class clazz) 
d614 1
a614 1
        
d617 1
a617 1
        
d620 1
a620 1
       
d623 1
a623 1
     */            
d626 1
a626 1
        if (cacheIntrospector) 
d628 1
a628 1
            if (singletonIntrospector == null) 
d636 1
a636 1
    
d651 1
a651 1
        
d658 1
a658 1
    public static XMLReader getXMLReader() throws Exception 
d673 1
a673 1
    private static XMLReader createXMLReader() throws Exception 
@


1.52
log
@Added the ability to use project templates, via the "extend" tag.

Templates are found under ${maven.home}/templates/${template-id}/project.xml.
To use this feature, "extend" your project with "template:${template-id}".

When using the "extend" tag, a distributed project won't be able to extend
another project if the directory layouts are different on both systems.
Using templates, you can move around your projects in your system, and Maven
will find its way to the parent project.
@
text
@d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d222 14
a235 11
            Project parent;
            try
            {
                parent = (Project) projectBeanReader.parse(
                  new File(pomToExtend));
            }
            catch (Exception e)
            {
                parent = (Project) projectBeanReader.parse(
                  new File(dir, pomToExtend));
            }
@


1.51
log
@Add support for extend properties where a project extend to an another project
@
text
@d75 1
d109 1
a109 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d202 20
@


1.50
log
@We can use absolute paths for extended projects
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d201 11
a211 2
            Project parent = (Project) projectBeanReader.parse(
                new File(pomToExtend));
@


1.49
log
@Remove unused code
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d202 1
a202 1
                new File(dir,pomToExtend));
@


1.48
log
@o Trying to localize the compilation of jelly scripts to the JellyUtils
  class.
o Move JellyUtils class to the org.apache.maven.util package.
o Added the ability to deal with different encodings and InputStreams
  w.r.t the compilation of Jelly scripts.

PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a578 1
        ExtendedBaseRules ebr = new ExtendedBaseRules();
@


1.47
log
@Patch to cache the XML parser used by Betwixt and to cache the XMLIntrospector to boost performance a bit.

Speeds up by 1 or 2 seconds on my machine. Though still more work to do...
@
text
@d93 1
a94 4

// Jelly goodies.

import org.apache.commons.jelly.Jelly;
a97 1
import org.apache.commons.jelly.parser.XMLParser;
d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d112 3
d147 8
d190 4
a193 2
    public static Project getProject(File projectDescriptor, File dir,
        MavenJellyContext parentContext) throws Exception
d201 3
a203 2
            Project parent = (Project) projectBeanReader.parse(new File(dir,
                pomToExtend));
d212 19
a230 1
    
d240 2
a241 1
        MavenJellyContext parentContext) throws Exception
a254 2
        XMLParser parser = new XMLParser();
        parser.setContext(context);
d256 3
a258 5
//        Jelly jelly = new Jelly();
        
        Script script = parser.parse(new InputStreamReader(
            getProjectInputStream(project)));
        script = script.compile();
d273 2
a274 4
     * Create a project bean reader. We use it more than once so we don't
     * want to create it more than once.
     * 
     * @@return a {@@link BeanReader} capable of reading {@@link Project projects}
d277 1
a277 1
    private static BeanReader getProjectBeanReader()
d280 1
a280 6
        if (projectBeanReader == null)
        {
            projectBeanReader = createBeanReader(Project.class);
        }            
        
        return projectBeanReader;
d282 1
a282 1
    
d299 5
a303 12
        return projectStream.toString();
    }

    /**
     * @@return an {@@link InputStream} for the given project
     * @@param project a {@@link Project maven project}
     * @@throws Exception when anything goes wrong. FIXME this is bad
     */
    public static InputStream getProjectInputStream(Project project)
        throws Exception
    {
        return new StringInputStream(getProjectString(project));
a615 1
        // set elements for attributes to true
a617 5

        // wrap collections in an XML element
        //introspector.setWrapCollectionsInElement(true);

        // turn bean elements into lower case
@


1.46
log
@- Rearrange code to allow easier understanding
- remove unused object
- cache xml bean infos
@
text
@d58 2
d76 2
d94 1
d105 2
d112 1
a112 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d116 5
d122 10
d567 1
a567 1
        BeanReader beanReader = new BeanReader();
d571 2
a572 1
        beanReader.setXMLIntrospector(createXMLIntrospector());
d577 17
d616 27
@


1.45
log
@Removed log as it wasn't being used
@
text
@d105 1
a105 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a191 5
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Jelly jelly = new Jelly();
        Writer writer = new BufferedWriter(new OutputStreamWriter(baos));
        XMLParser parser = new XMLParser();
        
a202 1
        
d204 1
d207 1
d213 2
d567 1
@


1.44
log
@Checkstyle violations
@
text
@a97 3
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

d105 1
a105 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.43
log
@o Refactoring of the core to try and encapsulate everything to do with
  Maven in Maven.java and simply using the App.java as a CLI harness.

o Fixed ProjectVerifier which was causing the grief today.
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d58 2
a59 1

a62 1
import java.io.FileOutputStream;
d65 1
a65 2
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
d67 1
a70 1
import java.util.HashMap;
a72 1
import java.util.Map;
a85 1
import org.apache.maven.project.Dependency;
a90 8
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URL;
d108 1
a108 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a111 2
    /** Log. */
    private static final Log log = LogFactory.getLog(MavenUtils.class);
d129 9
a137 2
    public static Project getProject(File projectDescriptor, MavenJellyContext parentContext)
        throws Exception
d141 8
a148 1

d159 2
d164 2
a165 2
    public static Project getProject(File projectDescriptor, File dir, MavenJellyContext parentContext)
        throws Exception
d173 2
a174 1
            Project parent = (Project) projectBeanReader.parse(new File(dir,pomToExtend));
d187 2
a188 1
     * @@param project 
d190 1
d192 2
a193 2
    private static Project getJellyProject(Project project, MavenJellyContext parentContext)
        throws Exception
d216 2
a217 1
        Script script = parser.parse( new InputStreamReader( getProjectInputStream(project) ));
d226 2
a227 1
        return (Project) projectBeanReader.parse(new StringReader(baos.toString()));
d233 3
d253 1
d267 5
d283 5
d298 4
d339 5
a343 1
    /** Hack-a-roo */
d346 5
a350 5
        if (o instanceof Boolean) return true;
        if (o instanceof String) return true;
        if (o instanceof Class) return true;
        if (o instanceof Integer) return true;
        
d358 3
d364 1
a364 1
        if (o instanceof Collection && ((Collection)o).size() == 0)
d516 5
d531 2
a532 1
            projects.add(getProject(new File(files[i]), new File(files[i]).getParentFile()));
d545 1
@


1.42
log
@make checkstyle happy
@
text
@d62 1
d65 2
d71 1
d74 1
d84 1
d88 1
d95 3
d100 2
d130 1
a130 1
     * Create a Project object given a name of a file.
d136 1
a136 1
    public static Project getProject(String projectDescriptor)
d139 1
a139 1
        return getProject(new File(projectDescriptor), new File("."));
d141 2
a142 9
    
    /**
     * Create a Project object given a name a file descriptor.
     *
     * @@param projectDescriptor a maven project.xml
     * @@return the Maven project object for the given project descriptor
     * @@throws Exception when any errors occur
     */
    public static Project getProject(File projectDescriptor)
d145 1
a145 1
        return getProject(projectDescriptor, new File("."));
d148 1
a148 9
    /**
     * Create a Project object given a name a file descriptor and a directory.
     *
     * @@param projectDescriptor a maven project.xml
     * @@param dir Directory to read the projectDescriptor from
     * @@return the Maven project object for the given project descriptor
     * @@throws Exception when any errors occur
     */
    public static Project getProject(String projectDescriptor, File dir)
d150 2
a151 2
    {        
        return getProject(new File(projectDescriptor), dir);
d155 1
a155 1
     * Create a Project object given a file descriptor and a dir.
a157 1
     * @@param dir Directory to read the projectDescriptor from
d161 1
a161 1
    public static Project getProject(File projectDescriptor, File dir)
d165 1
a165 2
        Project project = (Project) projectBeanReader
                                    .parse(projectDescriptor);
d170 1
a170 2
            Project parent = (Project) projectBeanReader
                                       .parse(new File(dir, pomToExtend));
d174 1
a174 1
        project = getJellyProject(project);
d183 1
a183 1
     * @@param project a maven Project 
a184 1
     * @@throws Exception when any errors occur
d186 1
a186 1
    private static Project getJellyProject(Project project)
d193 13
a205 1
        JellyContext context = new JellyContext();
d210 1
a210 2
        Script script = parser.parse(
                        new InputStreamReader(getProjectInputStream(project)));
d219 1
a219 2
        return (Project) projectBeanReader
                         .parse(new StringReader(baos.toString()));
a224 2
     * @@return a BeanReader
     * @@throws Exception when any errors occur
a241 1
     * @@throws Exception when any errors occur
a254 6
    /**
     * Create a project InputStream.
     * @@param project a maven Project
     * @@return the Project's InputStream
     * @@throws Exception when any errors occur
     */
a265 5
     *
     * @@param child the child Project to merge
     * @@param parent the parent Project to merge
     * @@return the child Project, merged with the parent Project
     * @@throws Exception when any errors occur
a275 4
     *
     * @@param child the child Project to merge
     * @@param parent the parent Project to merge
     * @@return the child Project, merged with the parent Project
d313 1
a313 6
    /** 
     * Checks if an Object is a Primitive
     *
     * @@param o any Object
     * @@return true if the Object is a Primitive
     */
d316 4
a319 16
        if (o instanceof Boolean)
        {
            return true;
        }
        if (o instanceof String)
        {
            return true;
        }
        if (o instanceof Class)
        {
            return true;
        }
        if (o instanceof Integer)
        {
            return true;
        }
a327 3
     *
     * @@param o the value that we want to ckeck
     * @@return true if it needs populating
d331 1
a331 1
        if (o instanceof Collection && ((Collection) o).size() == 0)
a482 5
     *
     * @@param directory Directory to scan
     * @@param includes Comma separated list of includes
     * @@return the List of projects found in the directory
     * @@throws Exception when any errors occur
d493 1
a493 2
            projects.add(getProject(files[i], 
                     new File(files[i]).getParentFile()));
d504 2
a505 1
     * @@throws Exception when any errors occur
@


1.41
log
@o Modify the bean reader so that a rule is added that will allow the
  use of meta properties in the POM, or any other object type eventually
  used by Maven.
@
text
@a61 1
import java.io.FileOutputStream;
a63 2
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
a67 1
import java.util.HashMap;
a69 1
import java.util.Map;
a81 1
import org.apache.maven.project.Dependency;
a87 3
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
a89 2
import java.net.MalformedURLException;
import java.net.URL;
d107 1
a107 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d158 1
a158 1
     * Create a Project object given a file descriptor.
d161 1
d169 2
a170 1
        Project project = (Project) projectBeanReader.parse(projectDescriptor);
d175 2
a176 1
            Project parent = (Project) projectBeanReader.parse(new File(dir,pomToExtend));
d189 1
a189 1
     * @@param project 
d191 1
d205 2
a206 1
        Script script = parser.parse( new InputStreamReader( getProjectInputStream(project) ));
d215 2
a216 1
        return (Project) projectBeanReader.parse(new StringReader(baos.toString()));
d222 2
d241 1
d255 6
d272 5
d287 4
d328 6
a333 1
    /** Hack-a-roo */
d336 16
a351 4
        if (o instanceof Boolean) return true;
        if (o instanceof String) return true;
        if (o instanceof Class) return true;
        if (o instanceof Integer) return true;
d360 3
d366 1
a366 1
        if (o instanceof Collection && ((Collection)o).size() == 0)
d518 5
d533 2
a534 1
            projects.add(getProject(files[i], new File(files[i]).getParentFile()));
d545 1
a545 2
     * @@throws IntrospectionException when an error occurs trying to determine
     *      properties of the class provided
@


1.40
log
@o cleaning up the javadoc
@
text
@d111 2
d118 1
a118 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d180 1
a180 1
        
d187 1
a187 1
        
d211 1
d513 3
@


1.39
log
@o only create the project bean reader once and reuse it.
@
text
@d112 2
a113 2
 * An ant task that takes values from the project descriptor and creates the
 * necessary patternsets and paths required to build the project.
d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d127 1
a127 1
     * Create a Project object given a file descriptor.
d138 8
a145 1

d152 8
d186 1
a186 1
        project = getInterpolatedProject(project);
d192 6
a197 6
    private static Project getInterpolatedProject(Project project)
        throws Exception
    {
        return getJellyProject(project);
    }

d236 6
a241 1

d516 6
@


1.38
log
@o simplifying interpolation for the sake of speed. step toward lazy
  evaluation of interpolated values.
@
text
@d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d122 4
a125 1
    
d161 1
a161 1
        BeanReader projectBeanReader = createBeanReader(Project.class);
d201 1
a201 1
        BeanReader projectBeanReader = createBeanReader(Project.class);
d205 16
@


1.37
log
@o updating for commons-lang b1 and changes to commons-cli
@
text
@d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d177 1
a177 1
        return getJellyProject(getJellyProject(project));
@


1.36
log
@o correctly the getProjects() method used by the reactor.
@
text
@d78 1
a78 1
import org.apache.commons.lang.Strings;
d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d424 1
a424 1
            includePatterns = Strings.split(includes, ",");
@


1.35
log
@o MavenUtils will now grab a set of projects
o Project knows where it's project.xml lives. Used primarily in the
  the reactor.
o getReadId() added to Dependency so that an id using the fugly notation
  can be changed into the id that is actually stated in the dependencies
  POM.
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d439 5
a443 1

d453 1
a453 1
            projects.add(getProject(files[i]));
@


1.34
log
@Glenn McAllister - 2002/07/25

- fixed the '//' url name problem when downloading dependencies
- maven.repo.remote can now be set in one of the standard properties files; if
  it isn't found, defaults to http://jakarta.apache.org/turbin/jars2/
- starting to debug the 74-null.jar style errors, looks like a bad dependency
  is being added to the project.
@
text
@d69 1
d73 1
d116 1
a116 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d144 1
a144 1
    {
d169 1
d438 15
@


1.33
log
@o Applying martin's patches for the ant build and the test resources
o Updating MavenUtils so that we can specify a project descriptor in
  a specific directory so that reactor type builds work correctly.
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d143 1
a143 1
        return getProject(projectDescriptor, dir);
@


1.32
log
@o Adding better extension support.
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d131 13
a143 1
        return getProject(new File(projectDescriptor));
d153 1
a153 1
    public static Project getProject(File projectDescriptor)
d162 1
a162 1
            Project parent = (Project) projectBeanReader.parse(new File(pomToExtend));
@


1.31
log
@o Adding method to deal with inheritance, interpolation and methods that
  are used by the Project class to turn itself into a dom4j document.
@
text
@d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d151 1
a151 1
            project = mergeProjects(project, parent);
d208 13
d222 1
a222 1
    private static Project mergeProjects(Project child, Project parent)
d237 4
a240 2
                Object o = childBeanMap.get(property);
                if (valueNeedsPopulating(o))
d242 7
a248 2
                    childBeanMap.put(property, parentBeanMap.get(property));
                }                    
d256 11
@


1.30
log
@o When reading in a project descriptor now look for an <extend> element
  which indicates we have a parent to inherit from.
@
text
@d59 1
d62 6
d78 1
d85 1
d88 20
d114 1
a114 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d118 3
d144 3
a146 2
        BeanReader beanReader = createBeanReader(Project.class);
        Project project = (Project) beanReader.parse(new FileInputStream(projectDescriptor));
a147 1
        
d150 1
a150 1
            Project parent = (Project) beanReader.parse(new FileInputStream(new File(pomToExtend)));
d154 2
d159 47
d406 2
d409 5
a423 3

        beanReader.setXMLIntrospector(introspector);
        beanReader.registerBeanClass(clazz);
d425 1
a425 1
        return beanReader;
@


1.29
log
@Style violations
@
text
@d61 3
d65 1
d67 2
a68 2
import java.beans.IntrospectionException;

a69 1

d85 1
a85 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d113 63
a175 2
        return (Project) beanReader.parse(new FileInputStream(
            projectDescriptor));
d322 1
a322 1
        throws IntrospectionException
@


1.28
log
@Style violations
@
text
@d82 1
a82 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d96 1
a96 1
        return getProject( new File( projectDescriptor ) );
d109 1
a109 1
        BeanReader beanReader = createBeanReader( Project.class );
d190 1
a190 1
        for (Iterator i = profile.getProjectIds().iterator(); i.hasNext(); )
d274 1
a274 1
        beanReader.registerBeanClass( clazz );
@


1.27
log
@Unwiring the utils from all packages except 'project' package. I wasn't here
to -1 this.
@
text
@d82 1
a82 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d110 2
a111 1
        return (Project) beanReader.parse( new FileInputStream( projectDescriptor ) );
d190 1
a190 1
        for (Iterator i = profile.getProjectIds().iterator(); i.hasNext();)
d253 1
@


1.26
log
@Checkstyle fixes
@
text
@d63 2
d67 4
a70 2
import org.apache.maven.build.BeanReader;
import org.apache.maven.build.ProjectDescriptor;
d82 1
a82 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a86 6
     * Maven project class name.
     */
    private static final String PROJECT_CLASS = 
        "org.apache.maven.project.Project";
    
    /**
d96 1
a96 1
        return new ProjectDescriptor(projectDescriptor).getProject();
d109 2
a110 1
        return new ProjectDescriptor(projectDescriptor).getProject();
d136 1
a136 1
        BeanReader reader = new BeanReader(Profile.class);
d178 1
a178 1
        BeanReader workspaceReader = new BeanReader(Workspace.class);
d246 29
@


1.25
log
@- Added ProjectDescriptor and Repository for build process
- Reworked project class and removed file dependencies to descriptor class
- reworked build to use descriptor
- Added tests
- fixed formatting on simple docbook stylesheet
@
text
@a70 2
import org.apache.commons.betwixt.strategy.DecapitalizeNameMapper;

d78 1
a78 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.24
log
@Change getProject methods to call constructors
@
text
@d66 1
d80 1
a80 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d100 1
a100 1
        return new Project(projectDescriptor);
d113 1
a113 1
        return new Project(projectDescriptor);
@


1.23
log
@Remove createBeanReader method
@
text
@d79 1
a79 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d99 1
a99 1
        return getProject(new File(projectDescriptor));
d112 1
a112 5
        BeanReader reader = new BeanReader(Project.class);
        Project project = (Project) reader.parse(
            new FileInputStream(projectDescriptor));
        
        return project;
@


1.22
log
@Utilitised BeanReader here for later removal of the createBeanReader method
@
text
@d65 1
a69 2
import org.apache.commons.betwixt.XMLIntrospector;
import org.apache.commons.betwixt.io.BeanReader;
d79 1
a79 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a89 14
     * Create a BeanReader that is setup to parse XML in the
     * standard Maven/Turbine format.
     *
     * @@param clazz Class that the XML is mapped to
     * @@return An initialized BeanReader
     * @@throws Exception on any error
     */
    public static BeanReader createBeanReader(Class clazz)
        throws Exception
    {
        return new org.apache.maven.build.BeanReader(clazz);
    }

    /**
d112 1
a112 1
        BeanReader reader = createBeanReader(Project.class);
d142 1
a142 1
        BeanReader reader = createBeanReader(Profile.class);
d184 1
a184 1
        BeanReader workspaceReader = createBeanReader(Workspace.class);
@


1.21
log
@More checkstyle fixes
@
text
@d80 1
a80 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d101 1
a101 16
        XMLIntrospector introspector = new XMLIntrospector();

        // set elements for attributes to true
        introspector.setAttributesForPrimitives(false);

        // wrap collections in an XML element
        //introspector.setWrapCollectionsInElement(true);

        // turn bean elements into lower case
        introspector.setNameMapper(new DecapitalizeNameMapper());

        BeanReader reader = new BeanReader();
        reader.setXMLIntrospector(introspector);
        reader.registerBeanClass(clazz);
        
        return reader;
@


1.20
log
@removed unused import and lines longer than 80 char
@
text
@d80 1
a80 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d87 1
a87 1
    private final static String PROJECT_CLASS =
d96 1
d225 1
a225 1
        for (Iterator i = profile.getProjectIds().iterator(); i.hasNext(); )
@


1.19
log
@- Using betwixt and not the mapper now

  Created some utility methods for creating project, profiles and workspaces.
  All the mapping is now performed by betwixt.
@
text
@a70 1
import org.apache.commons.betwixt.io.BeanWriter;
d80 1
a80 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d142 2
a143 1
        Project project = (Project) reader.parse(new FileInputStream(projectDescriptor));
d172 2
a173 1
        Profile profile = (Profile) reader.parse(new FileInputStream(profileDescriptor));
d214 2
a215 1
        Workspace workspace = (Workspace) workspaceReader.parse(new FileInputStream(workspaceDescriptor));
@


1.18
log
@Adding the code to use betwixt instead of the mapper but it's commented
out at the moment until some final issues are sorted out with
betwixt.
@
text
@a73 2
import org.apache.commons.xo.Mapper;

d81 1
a81 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d90 28
d142 3
a144 3
        Mapper mapper = new Mapper();
        Project project = (Project) mapper.map(projectDescriptor,
            PROJECT_CLASS);
d146 1
d148 12
a159 2
        /*
        XMLIntrospector introspector = new XMLIntrospector();
d161 12
a172 14
        // set elements for attributes to true
        introspector.setAttributesForPrimitives(false);

        // wrap collections in an XML element
        //introspector.setWrapCollectionsInElement(true);

        // turn bean elements into lower case
        introspector.setNameMapper(new DecapitalizeNameMapper());

        BeanReader reader = new BeanReader();
        reader.setXMLIntrospector(introspector);
        reader.registerBeanClass(Project.class);

        Project project = (Project) reader.parse(new FileInputStream(projectDescriptor));
d174 1
a174 2
        return project;
        */
d211 8
a218 9
        // Create our workspace
        Mapper workspaceMapper = new Mapper();
        Workspace workspace = (Workspace) workspaceMapper.map(
            workspaceDescriptor, Workspace.class.getName());

        // Create our profile
        Mapper profileMapper = new Mapper();
        Profile profile = (Profile) profileMapper.map(profileDescriptor,
            Profile.class.getName());
d220 1
a220 1

d228 2
a229 2
            File baseDir = new File(new File(mavenLocalRepo, "project"),
                projectId);
d233 2
a234 3
            Mapper projectMapper = new Mapper();
            Project project = (Project) projectMapper.map(projectDescriptor,
                Project.class.getName());
@


1.17
log
@no message
@
text
@d60 1
d69 5
d79 2
a80 3
 * An ant task that takes values from the project descriptor and
 * creates the necessary patternsets and paths required to build
 * the project.
d83 1
a83 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d90 1
a90 1
    private static final String PROJECT_CLASS =
d108 2
a109 1
     * @@param projectDescriptor a maven project.xml {@@link File} 
d117 1
a117 1
        Project project = (Project) mapper.map(projectDescriptor, 
d120 21
d144 2
a145 3
     * Create a Workspace object given a workspace and profile
     * descriptor.
     * 
d152 1
a152 1
    public static Workspace getWorkspace(String workspaceDescriptor, 
d157 3
a159 3
        return getWorkspace(new File(workspaceDescriptor), 
                            new File(profileDescriptor),
                            new File(mavenLocalRepo));
d163 1
a163 1
     * Create a <code>{@@link Workspace}</code> object given a workspace 
d165 1
a169 1
     *
d172 1
a172 1
    public static Workspace getWorkspace(File workspaceDescriptor, 
d178 1
a178 1
        Mapper workspaceMapper = new Mapper();        
d181 1
a181 1
            
d183 2
a184 2
        Mapper profileMapper = new Mapper();        
        Profile profile = (Profile) profileMapper.map(profileDescriptor, 
d187 1
a187 1
            
d189 1
a189 1
        for (Iterator i = profile.getProjectIds().iterator(); i.hasNext();)
d195 1
a195 1
            File baseDir = new File(new File(mavenLocalRepo, "project"), 
d198 1
a198 1
            
d201 1
a201 1
            Project project = (Project) projectMapper.map(projectDescriptor, 
d205 1
a205 1
        
@


1.16
log
@Fix checkstyle issues
@
text
@d55 2
d78 1
a78 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.15
log
@More checkstyle fixes (and Netbeans testing)
@
text
@d76 1
a76 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d109 2
a110 1
        Project project = (Project) mapper.map(projectDescriptor, PROJECT_CLASS);
d119 1
a119 1
     * @@param projectDescriptor the file name of a maven project descriptor
d135 6
a140 1
     * Create a Project object given a file descriptor.
d142 1
a142 1
     * @@throws Exception
d151 2
a152 1
        Workspace workspace = (Workspace) workspaceMapper.map(workspaceDescriptor, Workspace.class.getName());
d156 2
a157 1
        Profile profile = (Profile) profileMapper.map(profileDescriptor, Profile.class.getName());
d167 2
a168 1
            File baseDir = new File(new File(mavenLocalRepo, "project"), projectId);
d173 2
a174 1
            Project project = (Project) projectMapper.map(projectDescriptor, Project.class.getName());
d215 1
a215 1
            files[i] = new File(directory,files[i]).getAbsolutePath();
@


1.14
log
@Added javadoc @@param and @@return for checkstyle issues
@
text
@d76 1
a76 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d91 1
a91 1
     * @@throws Exception
d101 3
a103 2
     *
     * @@throws Exception
d109 1
a109 1
        Project project = (Project) mapper.map(projectDescriptor,PROJECT_CLASS);
d116 6
a121 2
     *
     * @@throws Exception
@


1.13
log
@Removed unused import
@
text
@d76 1
a76 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d83 1
a83 1
    private final static String PROJECT_CLASS =
d89 2
@


1.12
log
@- Created a FileProcessingExecutor that can be used to process files in
  a project's directory.  This executor is an abstract class that
  provides a template method called "doProcessFile" that subclasses can
  override to do whatever (my motivation is to use SourceTool to parse
  each file and pass it a visitor).  Additionally, there is pre/post
  processing template methods that can be overridden if needed.  I.e. in
  most cases you'll want to use the postProcessing method to do
  something with the results of the processing (again, in my case, I
  query the visitor object for the information it accumulated).

- Created a placeholder TaskListVisitor that will be used to accumulate
  todo/task tags in JavaDoc which will then be used to create the task
  list for a project.  Currenly, TaskListVisitor simply counts the
  number of JavaDoc entries (its a placeholder and I'm getting tired :)

- Created a TaskListExecutor which is a subclass of the new
  FileProcessingExecutor.  By using the FileProcessingExecutor it
  becomes trivial to pass any type of visitor through the entire source
  tree.  TaskListExecutor uses a TaskListVisitor.  bhl: This is how you
  can create a new JXR task using another visitor.

- Modified SourceTool to pass any parser exceptions.  Jason: you had
  modified this to ignore them so you could continue processing, but now
  I believe you can just use the FileProcessingExecutor instead, see the
  'doProcessFile' of my TaskListExecutor, this is the more appropriate
  spot to ignore the exception.

- Modified MavenUtils.getFiles to check if the 'includes' parameter is
  null.  If it is null, then pass that directly to Ant's directory
  scanner setIncludes() method which indicates all files should be
  matched.  Prior to this change, a NPE was thrown.

- Finally, the build files have a new target called maven:task-list
  which will invoke TaskListExecutor which will process all files in the
  {$src} directory and count the number of JavaDocs (until I actually
  write the real TaskListVisitor).  This new target is not automatically
  invoked as part of any other target yet (I'll hold off until it does
  what its supposed to), but in the meantime, you can invoke the target
  for testing purposes.
@
text
@a58 1
import java.util.List;
d76 1
a76 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.11
log
@Adding a workspace mapper. Used in the workspace mapper test and in the
reactor.
@
text
@d77 1
a77 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d186 5
d193 1
a193 1
        directoryScanner.setIncludes(Strings.split(includes,","));
@


1.10
log
@Moving to commons-xo.
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d58 1
d64 2
d77 1
a77 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d111 53
@


1.9
log
@Simplifying getProject(String) method.
@
text
@d64 1
a64 1
import org.apache.stratum.xo.Mapper;
d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
@


1.8
log
@Broke long line at 80 characters.
@
text
@d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d89 1
a89 1
    public static Project getProject(File projectDescriptor)
d92 1
a92 3
        Mapper mapper = new Mapper();
        Project project = (Project) mapper.map(projectDescriptor,PROJECT_CLASS);
        return project;
d100 1
a100 1
    public static Project getProject(String projectDescriptor)
d108 1
d120 1
a120 1
    
@


1.7
log
@Pushing in changes to maven utils, thanks to glenn for pointing this
out.
@
text
@d58 1
d74 1
a74 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d81 2
a82 1
    private final static String PROJECT_CLASS = "org.apache.maven.project.Project";
a143 1

@


1.6
log
@turn off debuging
@
text
@d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d117 12
d130 1
a130 1
        directoryScanner.setBasedir(new File(directory));
@


1.5
log
@Detect whether there are actually any sources and set a property in the
Ant project called "sourcesPresent". The source related documentation will
not be generated if there are no sources present. Fancy that.

Obtained from:
Submitted by:
Reviewed by:
@
text
@d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
a90 1
        mapper.setDebug(true);
@


1.4
log
@Added executor and accompanying changes to create a package -> project
map so that a set of class references can be turned into a set of
project references with the help of bcel which will collect the
class references from a set of JARs or classfiles.

If you want to make run the dist target you need to have the gump
descriptors checked out in order to make a set of maven descriptors.

PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d90 4
a93 3
            Mapper mapper = new Mapper();
            Project project = (Project) mapper.map(projectDescriptor,PROJECT_CLASS);
            return project;
d104 3
a106 3
            Mapper mapper = new Mapper();
            Project project = (Project) mapper.map(projectDescriptor,PROJECT_CLASS);
            return project;
@


1.3
log
@Extra semicolon removed.
@
text
@d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d95 12
@


1.2
log
@The build.xml file is now being checked into CVS because we have to deal
with project specific targets and it is most convenient to place these
specifics in build.xml so that users can simply type: 'ant <target>'.

Standard targets are in the maven build files and the build.xml file
just delegates to them.
PR:
Obtained from:
Submitted by:
Reviewed by:
@
text
@d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d86 1
a86 1
     */;
d119 1
a119 1
}@


1.1
log
@Adding executor beans, slowly moving away from the Ant coupling. Texen
is still a problem because I started with an Ant task for Maven instead
of using the bean pattern. But I will convert texen to a bean, I didn't
realize that Costin had the TaskAdapter cooked right into Ant to allow
beans to be used by Ant provided they contained a setProject() and execute()
method. Not sure why the setProject() is needed but it allows us to
have plain beans used by Ant which is what we want so that I can
use the beans in conjunction with a CLI util, or a GUI (more important for
the stuff I want to do).
@
text
@d59 2
d65 2
d73 1
a73 1
 * @@version $Id: MavenUtils.java,v,v 1.1.1.1 2004/10/22 12:29:52 evenisse Exp $
d86 1
a86 1
     */
d94 26
a119 1
}
@

